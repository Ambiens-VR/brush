// Autogenerated by brush-wgsl from source wgsl files. Do not edit.
#![allow(dead_code, clippy::all)]
fn create_composer() -> naga_oil::compose::Composer {
    let mut composer = naga_oil::compose::Composer::default();
    composer.add_composable_module(naga_oil::compose::ComposableModuleDescriptor {
        source: include_str!("./helpers.wgsl"),
        file_path: "helpers.wgsl",
        as_name: Some("helpers".to_string()),
        ..Default::default()
    }).unwrap();
    composer
}
pub(crate) mod project_forward {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [256, 1, 1];
    pub(crate) const TILE_WIDTH: u32 = 16;
    pub(crate) const COV_BLUR: f32 = 0.3;
    #[repr(C, align(16))]
    #[derive(bytemuck::NoUninit, Debug, PartialEq, Clone, Copy)]
    pub(crate) struct Uniforms {
        pub(crate) viewmat: [[f32; 4]; 4],
        pub(crate) focal: [f32; 2],
        pub(crate) pixel_center: [f32; 2],
        pub(crate) img_size: [u32; 2],
        pub(crate) clip_thresh: f32,
        pub(crate) sh_degree: u32,
    }
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        let mut composer = super::create_composer();
        composer.make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("project_forward.wgsl"),
            file_path: "src/shaders/project_forward.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
pub(crate) mod map_gaussian_to_intersects {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [256, 1, 1];
    pub(crate) const TILE_WIDTH: u32 = 16;
    #[repr(C, align(8))]
    #[derive(bytemuck::NoUninit, Debug, PartialEq, Clone, Copy)]
    pub(crate) struct Uniforms {
        pub(crate) tile_bounds: [u32; 2],
    }
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        let mut composer = super::create_composer();
        composer.make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("map_gaussian_to_intersects.wgsl"),
            file_path: "src/shaders/map_gaussian_to_intersects.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
pub(crate) mod get_tile_bin_edges {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [256, 1, 1];
    pub(crate) const VERTICAL_GROUPS: u32 = 8;
    pub(crate) const THREAD_COUNT: u32 = 256;
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        let mut composer = super::create_composer();
        composer.make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("get_tile_bin_edges.wgsl"),
            file_path: "src/shaders/get_tile_bin_edges.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
pub(crate) mod rasterize {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [16, 16, 1];
    pub(crate) const TILE_WIDTH: u32 = 16;
    pub(crate) const TILE_SIZE: u32 = 256;
    #[repr(C, align(16))]
    #[derive(bytemuck::NoUninit, Debug, PartialEq, Clone, Copy)]
    pub(crate) struct Uniforms {
        pub(crate) background: [f32; 4],
        pub(crate) img_size: [u32; 2],
        pub(crate) tile_bounds: [u32; 2],
    }
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        let mut composer = super::create_composer();
        composer.make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("rasterize.wgsl"),
            file_path: "src/shaders/rasterize.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
pub(crate) mod rasterize_backwards {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [16, 16, 1];
    pub(crate) const TILE_WIDTH: u32 = 16;
    pub(crate) const TILE_SIZE: u32 = 256;
    #[repr(C, align(16))]
    #[derive(bytemuck::NoUninit, Debug, PartialEq, Clone, Copy)]
    pub(crate) struct Uniforms {
        pub(crate) background: [f32; 4],
        pub(crate) img_size: [u32; 2],
        pub(crate) tile_bounds: [u32; 2],
    }
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        let mut composer = super::create_composer();
        composer.make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("rasterize_backwards.wgsl"),
            file_path: "src/shaders/rasterize_backwards.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
pub(crate) mod project_backwards {
    pub(crate) const WORKGROUP_SIZE: [u32; 3] = [256, 1, 1];
    #[repr(C, align(16))]
    #[derive(bytemuck::NoUninit, Debug, PartialEq, Clone, Copy)]
    pub(crate) struct Uniforms {
        pub(crate) viewmat: [[f32; 4]; 4],
        pub(crate) focal: [f32; 2],
        pub(crate) img_size: [u32; 2],
        pub(crate) sh_degree_pad: [u32; 4],
    }
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        let mut composer = super::create_composer();
        composer.make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("project_backwards.wgsl"),
            file_path: "src/shaders/project_backwards.wgsl",
            shader_defs,
            ..Default::default()
        }).unwrap()
    }
}
