// File automatically generated by wgsl_bindgen^
//
// ^ wgsl_bindgen version 0.10.0
// Changes made to this file will not be saved.
// SourceHash: ad9967ee4023575d0bf6732300b24205bf2fe04906e3901ac753a41b2b901eca

#![allow(unused, non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum ShaderEntry {
    ProjectForward,
    MapGaussianToIntersects,
    GetTileBinEdges,
    Rasterize,
    RasterizeBackwards,
    ProjectBackwards,
}
impl ShaderEntry {
    pub fn create_pipeline_layout(&self, device: &wgpu::Device) -> wgpu::PipelineLayout {
        match self {
            Self::ProjectForward => project_forward::create_pipeline_layout(device),
            Self::MapGaussianToIntersects => {
                map_gaussian_to_intersects::create_pipeline_layout(device)
            }
            Self::GetTileBinEdges => get_tile_bin_edges::create_pipeline_layout(device),
            Self::Rasterize => rasterize::create_pipeline_layout(device),
            Self::RasterizeBackwards => {
                rasterize_backwards::create_pipeline_layout(device)
            }
            Self::ProjectBackwards => project_backwards::create_pipeline_layout(device),
        }
    }
    pub fn create_shader_module_embed_source(
        &self,
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        match self {
            Self::ProjectForward => {
                project_forward::create_shader_module_embed_source(device)
            }
            Self::MapGaussianToIntersects => {
                map_gaussian_to_intersects::create_shader_module_embed_source(device)
            }
            Self::GetTileBinEdges => {
                get_tile_bin_edges::create_shader_module_embed_source(device)
            }
            Self::Rasterize => rasterize::create_shader_module_embed_source(device),
            Self::RasterizeBackwards => {
                rasterize_backwards::create_shader_module_embed_source(device)
            }
            Self::ProjectBackwards => {
                project_backwards::create_shader_module_embed_source(device)
            }
        }
    }
}
mod _root {
    pub use super::*;
}
pub mod layout_asserts {
    use super::{_root, _root::*};
    const WGSL_BASE_TYPE_ASSERTS: () = {
        assert!(std::mem::size_of:: < glam::Vec3A > () == 16);
        assert!(std::mem::align_of:: < glam::Vec3A > () == 16);
        assert!(std::mem::size_of:: < glam::Vec4 > () == 16);
        assert!(std::mem::align_of:: < glam::Vec4 > () == 16);
        assert!(std::mem::size_of:: < glam::Mat3A > () == 48);
        assert!(std::mem::align_of:: < glam::Mat3A > () == 16);
        assert!(std::mem::size_of:: < glam::Mat4 > () == 64);
        assert!(std::mem::align_of:: < glam::Mat4 > () == 16);
    };
    const PROJECT_FORWARD_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(project_forward::Uniforms, num_points) == 0);
        assert!(std::mem::offset_of!(project_forward::Uniforms, viewmat) == 16);
        assert!(std::mem::offset_of!(project_forward::Uniforms, intrins) == 80);
        assert!(std::mem::offset_of!(project_forward::Uniforms, img_size) == 96);
        assert!(std::mem::offset_of!(project_forward::Uniforms, tile_bounds) == 104);
        assert!(std::mem::offset_of!(project_forward::Uniforms, glob_scale) == 112);
        assert!(std::mem::offset_of!(project_forward::Uniforms, clip_thresh) == 116);
        assert!(std::mem::offset_of!(project_forward::Uniforms, block_width) == 120);
        assert!(std::mem::size_of:: < project_forward::Uniforms > () == 128);
    };
    const MAP_GAUSSIAN_TO_INTERSECTS_UNIFORMS_ASSERTS: () = {
        assert!(
            std::mem::offset_of!(map_gaussian_to_intersects::Uniforms, num_points) == 0
        );
        assert!(
            std::mem::offset_of!(map_gaussian_to_intersects::Uniforms, tile_bounds) == 8
        );
        assert!(
            std::mem::offset_of!(map_gaussian_to_intersects::Uniforms, block_width) == 16
        );
        assert!(std::mem::size_of:: < map_gaussian_to_intersects::Uniforms > () == 24);
    };
    const GET_TILE_BIN_EDGES_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(get_tile_bin_edges::Uniforms, num_intersects) == 0);
        assert!(std::mem::size_of:: < get_tile_bin_edges::Uniforms > () == 4);
    };
    const RASTERIZE_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(rasterize::Uniforms, tile_bounds) == 0);
        assert!(std::mem::offset_of!(rasterize::Uniforms, background) == 16);
        assert!(std::mem::offset_of!(rasterize::Uniforms, img_size) == 32);
        assert!(std::mem::size_of:: < rasterize::Uniforms > () == 48);
    };
    const RASTERIZE_BACKWARDS_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(rasterize_backwards::Uniforms, img_size) == 0);
        assert!(std::mem::offset_of!(rasterize_backwards::Uniforms, tile_bounds) == 8);
        assert!(std::mem::offset_of!(rasterize_backwards::Uniforms, background) == 16);
        assert!(std::mem::size_of:: < rasterize_backwards::Uniforms > () == 32);
    };
    const PROJECT_BACKWARDS_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(project_backwards::Uniforms, num_points) == 0);
        assert!(std::mem::offset_of!(project_backwards::Uniforms, glob_scale) == 4);
        assert!(std::mem::offset_of!(project_backwards::Uniforms, viewmat) == 16);
        assert!(std::mem::offset_of!(project_backwards::Uniforms, intrins) == 80);
        assert!(std::mem::offset_of!(project_backwards::Uniforms, img_size) == 96);
        assert!(std::mem::size_of:: < project_backwards::Uniforms > () == 112);
    };
}
pub mod project_forward {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 4, offset: 0x0, type: `u32`
        pub num_points: u32,
        pub _pad_num_points: [u8; 0x10 - core::mem::size_of::<u32>()],
        /// size: 64, offset: 0x10, type: `mat4x4<f32>`
        pub viewmat: glam::Mat4,
        /// size: 16, offset: 0x50, type: `vec4<f32>`
        pub intrins: glam::Vec4,
        /// size: 8, offset: 0x60, type: `vec2<u32>`
        pub img_size: [u32; 2],
        /// size: 8, offset: 0x68, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        /// size: 4, offset: 0x70, type: `f32`
        pub glob_scale: f32,
        /// size: 4, offset: 0x74, type: `f32`
        pub clip_thresh: f32,
        /// size: 4, offset: 0x78, type: `u32`
        pub block_width: u32,
        pub _pad_block_width: [u8; 0x8 - core::mem::size_of::<u32>()],
    }
    impl Uniforms {
        pub const fn new(
            num_points: u32,
            viewmat: glam::Mat4,
            intrins: glam::Vec4,
            img_size: [u32; 2],
            tile_bounds: [u32; 2],
            glob_scale: f32,
            clip_thresh: f32,
            block_width: u32,
        ) -> Self {
            Self {
                num_points,
                _pad_num_points: [0; 0x10 - core::mem::size_of::<u32>()],
                viewmat,
                intrins,
                img_size,
                tile_bounds,
                glob_scale,
                clip_thresh,
                block_width,
                _pad_block_width: [0; 0x8 - core::mem::size_of::<u32>()],
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct UniformsInit {
        pub num_points: u32,
        pub viewmat: glam::Mat4,
        pub intrins: glam::Vec4,
        pub img_size: [u32; 2],
        pub tile_bounds: [u32; 2],
        pub glob_scale: f32,
        pub clip_thresh: f32,
        pub block_width: u32,
    }
    impl UniformsInit {
        pub const fn build(&self) -> Uniforms {
            Uniforms {
                num_points: self.num_points,
                _pad_num_points: [0; 0x10 - core::mem::size_of::<u32>()],
                viewmat: self.viewmat,
                intrins: self.intrins,
                img_size: self.img_size,
                tile_bounds: self.tile_bounds,
                glob_scale: self.glob_scale,
                clip_thresh: self.clip_thresh,
                block_width: self.block_width,
                _pad_block_width: [0; 0x8 - core::mem::size_of::<u32>()],
            }
        }
    }
    impl From<UniformsInit> for Uniforms {
        fn from(data: UniformsInit) -> Self {
            data.build()
        }
    }
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub means: wgpu::BufferBinding<'a>,
            pub scales: wgpu::BufferBinding<'a>,
            pub quats: wgpu::BufferBinding<'a>,
            pub xys: wgpu::BufferBinding<'a>,
            pub depths: wgpu::BufferBinding<'a>,
            pub radii: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub compensation: wgpu::BufferBinding<'a>,
            pub num_tiles_hit: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 10] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.means),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.scales),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.quats),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.depths),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.radii),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.compensation),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.num_tiles_hit),
                    },
                    wgpu::BindGroupEntry {
                        binding: 9,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("ProjectForward::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 9,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("ProjectForward::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("ProjectForward::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("project_forward.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    num_points: u32,
    viewmat: mat4x4<f32>,
    intrins: vec4<f32>,
    img_size: vec2<u32>,
    tile_bounds: vec2<u32>,
    glob_scale: f32,
    clip_thresh: f32,
    block_width: u32,
}

@group(0) @binding(0) 
var<storage> means: array<vec4<f32>>;
@group(0) @binding(1) 
var<storage> scales: array<vec4<f32>>;
@group(0) @binding(2) 
var<storage> quats: array<vec4<f32>>;
@group(0) @binding(3) 
var<storage, read_write> xys: array<vec2<f32>>;
@group(0) @binding(4) 
var<storage, read_write> depths: array<f32>;
@group(0) @binding(5) 
var<storage, read_write> radii: array<f32>;
@group(0) @binding(6) 
var<storage, read_write> conics: array<vec4<f32>>;
@group(0) @binding(7) 
var<storage, read_write> compensation: array<f32>;
@group(0) @binding(8) 
var<storage, read_write> num_tiles_hit: array<i32>;
@group(0) @binding(9) 
var<storage> info_array: array<Uniforms>;

fn get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(center: vec2<f32>, dims: vec2<f32>, bounds: vec2<u32>) -> vec4<u32> {
    let min = vec2<u32>(clamp(vec2<i32>((center - dims)), vec2(0i), vec2<i32>(bounds)));
    let max = vec2<u32>(clamp(vec2<i32>(((center + dims) + vec2(1f))), vec2(0i), vec2<i32>(bounds)));
    return vec4<u32>(min, max);
}

fn get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(pix_center: vec2<f32>, pix_radius: f32, tile_bounds: vec2<u32>, block_size: u32) -> vec4<u32> {
    let tile_center = (pix_center / vec2(f32(block_size)));
    let tile_radius = (vec2<f32>(pix_radius, pix_radius) / vec2(f32(block_size)));
    let _e11 = get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(tile_center, tile_radius, tile_bounds);
    return _e11;
}

fn quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat: vec4<f32>) -> mat3x3<f32> {
    let quat_norm = normalize((quat + vec4(0.000001f)));
    let w = quat_norm.x;
    let x = quat_norm.y;
    let y = quat_norm.z;
    let z = quat_norm.w;
    return mat3x3<f32>(vec3<f32>((1f - (2f * ((y * y) + (z * z)))), (2f * ((x * y) + (w * z))), (2f * ((x * z) - (w * y)))), vec3<f32>((2f * ((x * y) - (w * z))), (1f - (2f * ((x * x) + (z * z)))), (2f * ((y * z) + (w * x)))), vec3<f32>((2f * ((x * z) + (w * y))), (2f * ((y * z) - (w * x))), (1f - (2f * ((x * x) + (y * y))))));
}

fn project_pix(fxfy: vec2<f32>, p_view: vec3<f32>, pp: vec2<f32>) -> vec2<f32> {
    let p_proj = (p_view.xy / vec2((p_view.z + 0.000001f)));
    let p_pix = ((p_proj.xy * fxfy.xy) + pp);
    return p_pix;
}

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_id) local_id: vec3<u32>, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    let idx = global_id.x;
    let info = info_array[0];
    let num_points = info.num_points;
    if (idx >= num_points) {
        return;
    }
    let glob_scale = info.glob_scale;
    let viewmat = info.viewmat;
    let intrins = info.intrins;
    let img_size = info.img_size;
    let tile_bounds_1 = info.tile_bounds;
    let block_width = info.block_width;
    let clip_thresh = info.clip_thresh;
    radii[idx] = 0f;
    num_tiles_hit[idx] = 0i;
    let _e22 = means[idx];
    let mean = _e22.xyz;
    let W = mat3x3<f32>(viewmat[0].xyz, viewmat[1].xyz, viewmat[2].xyz);
    let p_view_1 = ((W * mean) + viewmat[3].xyz);
    if (p_view_1.z <= clip_thresh) {
        return;
    }
    let scale = scales[idx];
    let quat_1 = quats[idx];
    let _e43 = quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat_1);
    let scale_total = (scale * glob_scale);
    let S = mat3x3<f32>(vec3<f32>(scale_total.x, 0f, 0f), vec3<f32>(0f, scale_total.y, 0f), vec3<f32>(0f, 0f, scale_total.z));
    let M = (_e43 * S);
    let V = (M * transpose(M));
    let fx = intrins.x;
    let fy = intrins.y;
    let cx = intrins.z;
    let cy = intrins.w;
    let tan_fovx = ((0.5f * f32(img_size.x)) / fx);
    let tan_fovy = ((0.5f * f32(img_size.y)) / fy);
    let lims = (1.3f * vec2<f32>(tan_fovx, tan_fovy));
    let t = (p_view_1.z * clamp((p_view_1.xy / vec2(p_view_1.z)), -(lims), lims));
    let rz = (1f / p_view_1.z);
    let rz2_ = (rz * rz);
    let J = mat3x3<f32>(vec3<f32>((fx * rz), 0f, 0f), vec3<f32>(0f, (fy * rz), 0f), vec3<f32>(((-(fx) * t.x) * rz2_), ((-(fy) * t.y) * rz2_), 0f));
    let T = (J * W);
    let cov = ((T * V) * transpose(T));
    let c00_ = cov[0].x;
    let c11_ = cov[1].y;
    let c01_ = cov[0].y;
    let cov2d = vec3<f32>((c00_ + 0.3f), c01_, (c11_ + 0.3f));
    let det = ((cov2d.x * cov2d.z) - (cov2d.y * cov2d.y));
    if (det == 0f) {
        return;
    }
    let conic = (vec3<f32>(cov2d.z, -(cov2d.y), cov2d.x) / vec3(det));
    let b = (0.5f * (cov2d.x + cov2d.z));
    let v1_ = (b + sqrt(max(0.1f, ((b * b) - det))));
    let v2_ = (b - sqrt(max(0.1f, ((b * b) - det))));
    let radius = ceil((3f * sqrt(max(0f, max(v1_, v2_)))));
    let _e167 = project_pix(vec2<f32>(fx, fy), p_view_1.xyz, vec2<f32>(cx, cy));
    let _e168 = get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(_e167, radius, tile_bounds_1, block_width);
    let tile_area = ((_e168.z - _e168.x) * (_e168.w - _e168.y));
    if (tile_area <= 0u) {
        return;
    }
    num_tiles_hit[idx] = i32(tile_area);
    depths[idx] = p_view_1.z;
    radii[idx] = radius;
    xys[idx] = _e167;
    conics[idx] = vec4<f32>(conic, 1f);
    let det_orig = ((c00_ * c11_) - (c01_ * c01_));
    let det_blur = ((cov2d.x * cov2d.z) - (cov2d.y * cov2d.y));
    compensation[idx] = sqrt(max(0f, (det_orig / det_blur)));
    return;
}
"#;
}
pub mod bytemuck_impls {
    use super::{_root, _root::*};
    unsafe impl bytemuck::Zeroable for project_forward::Uniforms {}
    unsafe impl bytemuck::Pod for project_forward::Uniforms {}
    unsafe impl bytemuck::Zeroable for map_gaussian_to_intersects::Uniforms {}
    unsafe impl bytemuck::Pod for map_gaussian_to_intersects::Uniforms {}
    unsafe impl bytemuck::Zeroable for get_tile_bin_edges::Uniforms {}
    unsafe impl bytemuck::Pod for get_tile_bin_edges::Uniforms {}
    unsafe impl bytemuck::Zeroable for rasterize::Uniforms {}
    unsafe impl bytemuck::Pod for rasterize::Uniforms {}
    unsafe impl bytemuck::Zeroable for rasterize_backwards::Uniforms {}
    unsafe impl bytemuck::Pod for rasterize_backwards::Uniforms {}
    unsafe impl bytemuck::Zeroable for project_backwards::Uniforms {}
    unsafe impl bytemuck::Pod for project_backwards::Uniforms {}
}
pub mod map_gaussian_to_intersects {
    use super::{_root, _root::*};
    #[repr(C, align(8))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 4, offset: 0x0, type: `u32`
        pub num_points: u32,
        pub _pad_num_points: [u8; 0x8 - core::mem::size_of::<u32>()],
        /// size: 8, offset: 0x8, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        /// size: 4, offset: 0x10, type: `u32`
        pub block_width: u32,
        pub _pad_block_width: [u8; 0x8 - core::mem::size_of::<u32>()],
    }
    impl Uniforms {
        pub const fn new(
            num_points: u32,
            tile_bounds: [u32; 2],
            block_width: u32,
        ) -> Self {
            Self {
                num_points,
                _pad_num_points: [0; 0x8 - core::mem::size_of::<u32>()],
                tile_bounds,
                block_width,
                _pad_block_width: [0; 0x8 - core::mem::size_of::<u32>()],
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct UniformsInit {
        pub num_points: u32,
        pub tile_bounds: [u32; 2],
        pub block_width: u32,
    }
    impl UniformsInit {
        pub const fn build(&self) -> Uniforms {
            Uniforms {
                num_points: self.num_points,
                _pad_num_points: [0; 0x8 - core::mem::size_of::<u32>()],
                tile_bounds: self.tile_bounds,
                block_width: self.block_width,
                _pad_block_width: [0; 0x8 - core::mem::size_of::<u32>()],
            }
        }
    }
    impl From<UniformsInit> for Uniforms {
        fn from(data: UniformsInit) -> Self {
            data.build()
        }
    }
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub xys: wgpu::BufferBinding<'a>,
            pub depths: wgpu::BufferBinding<'a>,
            pub radii: wgpu::BufferBinding<'a>,
            pub cum_tiles_hit: wgpu::BufferBinding<'a>,
            pub isect_ids: wgpu::BufferBinding<'a>,
            pub isect_depths: wgpu::BufferBinding<'a>,
            pub gaussian_ids: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 8] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.depths),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.radii),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.cum_tiles_hit),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.isect_ids),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.isect_depths),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.gaussian_ids),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("MapGaussianToIntersects::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("MapGaussianToIntersects::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("MapGaussianToIntersects::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("map_gaussian_to_intersects.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    num_points: u32,
    tile_bounds: vec2<u32>,
    block_width: u32,
}

@group(0) @binding(0) 
var<storage> xys: array<vec2<f32>>;
@group(0) @binding(1) 
var<storage> depths: array<f32>;
@group(0) @binding(2) 
var<storage> radii: array<f32>;
@group(0) @binding(3) 
var<storage> cum_tiles_hit: array<u32>;
@group(0) @binding(4) 
var<storage, read_write> isect_ids: array<u32>;
@group(0) @binding(5) 
var<storage, read_write> isect_depths: array<f32>;
@group(0) @binding(6) 
var<storage, read_write> gaussian_ids: array<u32>;
@group(0) @binding(7) 
var<storage> info_array: array<Uniforms>;

fn get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(center: vec2<f32>, dims: vec2<f32>, bounds: vec2<u32>) -> vec4<u32> {
    let min = vec2<u32>(clamp(vec2<i32>((center - dims)), vec2(0i), vec2<i32>(bounds)));
    let max = vec2<u32>(clamp(vec2<i32>(((center + dims) + vec2(1f))), vec2(0i), vec2<i32>(bounds)));
    return vec4<u32>(min, max);
}

fn get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(pix_center: vec2<f32>, pix_radius: f32, tile_bounds: vec2<u32>, block_size: u32) -> vec4<u32> {
    let tile_center = (pix_center / vec2(f32(block_size)));
    let tile_radius = (vec2<f32>(pix_radius, pix_radius) / vec2(f32(block_size)));
    let _e11 = get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(tile_center, tile_radius, tile_bounds);
    return _e11;
}

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_id) local_id: vec3<u32>, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    var cur_idx: u32 = 0u;
    var i: u32;
    var j: u32;

    let idx = global_id.x;
    let info = info_array[0];
    let num_points = info.num_points;
    if (idx >= num_points) {
        return;
    }
    let radius = radii[idx];
    if (radius <= 0f) {
        isect_ids[idx] = 123u;
        return;
    }
    let tile_bounds_1 = info.tile_bounds;
    let block_width = info.block_width;
    let center_1 = xys[idx];
    let _e21 = get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(center_1, radius, tile_bounds_1, block_width);
    let tile_min = _e21.xy;
    let tile_max = _e21.zw;
    if (idx > 0u) {
        let _e30 = cum_tiles_hit[(idx - 1u)];
        cur_idx = _e30;
    }
    i = tile_min.y;
    loop {
        let _e34 = i;
        if (_e34 < tile_max.y) {
        } else {
            break;
        }
        {
            j = tile_min.x;
            loop {
                let _e39 = j;
                if (_e39 < tile_max.x) {
                } else {
                    break;
                }
                {
                    let _e42 = i;
                    let _e45 = j;
                    let tile_id = ((_e42 * tile_bounds_1.x) + _e45);
                    let _e48 = cur_idx;
                    isect_ids[_e48] = tile_id;
                    let _e51 = cur_idx;
                    let _e55 = depths[idx];
                    isect_depths[_e51] = _e55;
                    let _e57 = cur_idx;
                    gaussian_ids[_e57] = idx;
                    let _e60 = cur_idx;
                    cur_idx = (_e60 + 1u);
                }
                continuing {
                    let _e63 = j;
                    j = (_e63 + 1u);
                }
            }
        }
        continuing {
            let _e66 = i;
            i = (_e66 + 1u);
        }
    }
    return;
}
"#;
}
pub mod get_tile_bin_edges {
    use super::{_root, _root::*};
    #[repr(C, align(4))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 4, offset: 0x0, type: `u32`
        pub num_intersects: u32,
    }
    impl Uniforms {
        pub const fn new(num_intersects: u32) -> Self {
            Self { num_intersects }
        }
    }
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub isect_ids_sorted: wgpu::BufferBinding<'a>,
            pub tile_bins: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 3] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.isect_ids_sorted),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.tile_bins),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("GetTileBinEdges::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("GetTileBinEdges::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("GetTileBinEdges::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("get_tile_bin_edges.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    num_intersects: u32,
}

@group(0) @binding(0) 
var<storage> isect_ids_sorted: array<u32>;
@group(0) @binding(1) 
var<storage, read_write> tile_bins: array<vec2<u32>>;
@group(0) @binding(2) 
var<storage> info_array: array<Uniforms>;

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_id) local_id: vec3<u32>, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    let info = info_array[0];
    let num_intersects = info.num_intersects;
    let idx = global_id.x;
    if (idx >= num_intersects) {
        return;
    }
    let cur_tile_idx = isect_ids_sorted[idx];
    if (idx == (num_intersects - 1u)) {
        tile_bins[cur_tile_idx].y = num_intersects;
    }
    if (idx == 0u) {
        tile_bins[cur_tile_idx].x = 0u;
        return;
    }
    let prev_tile_idx = isect_ids_sorted[(idx - 1u)];
    if (prev_tile_idx != cur_tile_idx) {
        tile_bins[prev_tile_idx].y = idx;
        tile_bins[cur_tile_idx].x = idx;
        return;
    } else {
        return;
    }
}
"#;
}
pub mod rasterize {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 8, offset: 0x0, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        pub _pad_tile_bounds: [u8; 0x10 - core::mem::size_of::<[u32; 2]>()],
        /// size: 12, offset: 0x10, type: `vec3<f32>`
        pub background: glam::Vec3A,
        /// size: 8, offset: 0x20, type: `vec2<u32>`
        pub img_size: [u32; 2],
        pub _pad_img_size: [u8; 0x10 - core::mem::size_of::<[u32; 2]>()],
    }
    impl Uniforms {
        pub const fn new(
            tile_bounds: [u32; 2],
            background: glam::Vec3A,
            img_size: [u32; 2],
        ) -> Self {
            Self {
                tile_bounds,
                _pad_tile_bounds: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
                background,
                img_size,
                _pad_img_size: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct UniformsInit {
        pub tile_bounds: [u32; 2],
        pub background: glam::Vec3A,
        pub img_size: [u32; 2],
    }
    impl UniformsInit {
        pub const fn build(&self) -> Uniforms {
            Uniforms {
                tile_bounds: self.tile_bounds,
                _pad_tile_bounds: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
                background: self.background,
                img_size: self.img_size,
                _pad_img_size: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
            }
        }
    }
    impl From<UniformsInit> for Uniforms {
        fn from(data: UniformsInit) -> Self {
            data.build()
        }
    }
    pub const BLOCK_WIDTH: u32 = 16u32;
    pub const BLOCK_SIZE: u32 = 256u32;
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub gaussian_ids_sorted: wgpu::BufferBinding<'a>,
            pub tile_bins: wgpu::BufferBinding<'a>,
            pub xys: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub colors: wgpu::BufferBinding<'a>,
            pub opacities: wgpu::BufferBinding<'a>,
            pub out_img: wgpu::BufferBinding<'a>,
            pub final_index: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 9] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.gaussian_ids_sorted),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.tile_bins),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.colors),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.opacities),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.out_img),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.final_index),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("Rasterize::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("Rasterize::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [16, 16, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("Rasterize::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("rasterize.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    tile_bounds: vec2<u32>,
    background: vec3<f32>,
    img_size: vec2<u32>,
}

const BLOCK_WIDTH: u32 = 16u;
const BLOCK_SIZE: u32 = 256u;

@group(0) @binding(0) 
var<storage> gaussian_ids_sorted: array<u32>;
@group(0) @binding(1) 
var<storage> tile_bins: array<vec2<u32>>;
@group(0) @binding(2) 
var<storage> xys: array<vec2<f32>>;
@group(0) @binding(3) 
var<storage> conics: array<vec4<f32>>;
@group(0) @binding(4) 
var<storage> colors: array<vec4<f32>>;
@group(0) @binding(5) 
var<storage> opacities: array<f32>;
@group(0) @binding(6) 
var<storage, read_write> out_img: array<vec4<f32>>;
@group(0) @binding(7) 
var<storage, read_write> final_index: array<u32>;
@group(0) @binding(8) 
var<storage> info_array: array<Uniforms>;
var<workgroup> id_batch: array<u32, 256>;
var<workgroup> xy_batch: array<vec2<f32>, 256>;
var<workgroup> opacity_batch: array<f32, 256>;
var<workgroup> conic_batch: array<vec4<f32>, 256>;

@compute @workgroup_size(16, 16, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_id) local_id: vec3<u32>, @builtin(local_invocation_index) local_idx: u32, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    var done: bool = false;
    var T: f32 = 1f;
    var pix_out: vec3<f32> = vec3(0f);
    var final_idx: u32;
    var batch_start: u32;
    var t: u32;
    var sigma: f32;
    var alpha: f32;

    let info = info_array[0];
    let tile_bounds = info.tile_bounds;
    let background = info.background;
    let img_size = info.img_size;
    let tile_id = (workgroup_id.x + (workgroup_id.y * tile_bounds.x));
    let px = (f32(global_id.x) + 0.5f);
    let py = (f32(global_id.y) + 0.5f);
    let pix_id = (global_id.x + (global_id.y * img_size.x));
    let inside = ((global_id.x < img_size.x) && (global_id.y < img_size.y));
    if !(inside) {
        done = true;
    }
    let range = tile_bins[tile_id];
    final_idx = range.y;
    batch_start = range.x;
    loop {
        let _e47 = batch_start;
        if (_e47 < range.y) {
        } else {
            break;
        }
        {
            workgroupBarrier();
            let _e51 = batch_start;
            let idx = (_e51 + local_idx);
            if (idx < range.y) {
                let g_id = gaussian_ids_sorted[idx];
                id_batch[local_idx] = g_id;
                let _e64 = xys[g_id];
                xy_batch[local_idx] = _e64;
                let _e69 = opacities[g_id];
                opacity_batch[local_idx] = _e69;
                let _e74 = conics[g_id];
                conic_batch[local_idx] = _e74;
            }
            workgroupBarrier();
            let _e76 = batch_start;
            let remaining = min(BLOCK_SIZE, (range.y - _e76));
            let _e80 = done;
            if !(_e80) {
                t = 0u;
                loop {
                    let _e84 = t;
                    if (_e84 < remaining) {
                    } else {
                        break;
                    }
                    {
                        let _e87 = t;
                        let xy = xy_batch[_e87];
                        let _e91 = t;
                        let opac = opacity_batch[_e91];
                        let _e95 = t;
                        let conic = conic_batch[_e95];
                        let delta = (xy - vec2<f32>(px, py));
                        sigma = ((0.5f * (((conic.x * delta.x) * delta.x) + ((conic.z * delta.y) * delta.y))) + ((conic.y * delta.x) * delta.y));
                        let _e121 = sigma;
                        alpha = min(0.999f, (opac * exp(-(_e121))));
                        let _e127 = sigma;
                        let _e130 = alpha;
                        if ((_e127 < 0f) || (_e130 < 0.003921569f)) {
                            continue;
                        }
                        let _e135 = T;
                        let _e136 = alpha;
                        let next_T = (_e135 * (1f - _e136));
                        if (next_T <= 0.0001f) {
                            done = true;
                            break;
                        }
                        let _e144 = t;
                        let g = id_batch[_e144];
                        let _e147 = alpha;
                        let _e148 = T;
                        let vis = (_e147 * _e148);
                        T = next_T;
                        let _e152 = colors[g];
                        let c = _e152.xyz;
                        let _e156 = pix_out;
                        pix_out = (_e156 + (c * vis));
                        let _e158 = batch_start;
                        let _e159 = t;
                        final_idx = (_e158 + _e159);
                    }
                    continuing {
                        let _e162 = t;
                        t = (_e162 + 1u);
                    }
                }
            }
        }
        continuing {
            let _e165 = batch_start;
            batch_start = (_e165 + BLOCK_SIZE);
        }
    }
    if inside {
        let _e169 = pix_out;
        let _e170 = T;
        let _e175 = T;
        out_img[pix_id] = vec4<f32>((_e169 + ((1f - _e170) * background)), _e175);
        let _e179 = final_idx;
        final_index[pix_id] = _e179;
        return;
    } else {
        return;
    }
}
"#;
}
pub mod rasterize_backwards {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 8, offset: 0x0, type: `vec2<u32>`
        pub img_size: [u32; 2],
        /// size: 8, offset: 0x8, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        /// size: 12, offset: 0x10, type: `vec3<f32>`
        pub background: glam::Vec3A,
    }
    impl Uniforms {
        pub const fn new(
            img_size: [u32; 2],
            tile_bounds: [u32; 2],
            background: glam::Vec3A,
        ) -> Self {
            Self {
                img_size,
                tile_bounds,
                background,
            }
        }
    }
    pub const BLOCK_WIDTH: u32 = 16u32;
    pub const BLOCK_SIZE: u32 = 256u32;
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub gaussian_ids_sorted: wgpu::BufferBinding<'a>,
            pub tile_bins: wgpu::BufferBinding<'a>,
            pub xys: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub colors: wgpu::BufferBinding<'a>,
            pub opacities: wgpu::BufferBinding<'a>,
            pub final_index: wgpu::BufferBinding<'a>,
            pub output: wgpu::BufferBinding<'a>,
            pub v_output: wgpu::BufferBinding<'a>,
            pub v_opacity: wgpu::BufferBinding<'a>,
            pub v_conic: wgpu::BufferBinding<'a>,
            pub v_xy: wgpu::BufferBinding<'a>,
            pub v_rgb: wgpu::BufferBinding<'a>,
            pub locks: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 15] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.gaussian_ids_sorted),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.tile_bins),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.colors),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.opacities),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.final_index),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.output),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.v_output),
                    },
                    wgpu::BindGroupEntry {
                        binding: 9,
                        resource: wgpu::BindingResource::Buffer(self.v_opacity),
                    },
                    wgpu::BindGroupEntry {
                        binding: 10,
                        resource: wgpu::BindingResource::Buffer(self.v_conic),
                    },
                    wgpu::BindGroupEntry {
                        binding: 11,
                        resource: wgpu::BindingResource::Buffer(self.v_xy),
                    },
                    wgpu::BindGroupEntry {
                        binding: 12,
                        resource: wgpu::BindingResource::Buffer(self.v_rgb),
                    },
                    wgpu::BindGroupEntry {
                        binding: 13,
                        resource: wgpu::BindingResource::Buffer(self.locks),
                    },
                    wgpu::BindGroupEntry {
                        binding: 14,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("RasterizeBackwards::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 9,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 10,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 11,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 12,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 13,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 14,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("RasterizeBackwards::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [16, 16, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("RasterizeBackwards::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("rasterize_backwards.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    img_size: vec2<u32>,
    tile_bounds: vec2<u32>,
    background: vec3<f32>,
}

const BLOCK_WIDTH: u32 = 16u;
const BLOCK_SIZE: u32 = 256u;

@group(0) @binding(0) 
var<storage> gaussian_ids_sorted: array<u32>;
@group(0) @binding(1) 
var<storage> tile_bins: array<vec2<u32>>;
@group(0) @binding(2) 
var<storage> xys: array<vec2<f32>>;
@group(0) @binding(3) 
var<storage> conics: array<vec4<f32>>;
@group(0) @binding(4) 
var<storage> colors: array<vec4<f32>>;
@group(0) @binding(5) 
var<storage> opacities: array<f32>;
@group(0) @binding(6) 
var<storage> final_index: array<u32>;
@group(0) @binding(7) 
var<storage> output: array<vec4<f32>>;
@group(0) @binding(8) 
var<storage> v_output: array<vec4<f32>>;
@group(0) @binding(9) 
var<storage, read_write> v_opacity: array<f32>;
@group(0) @binding(10) 
var<storage, read_write> v_conic: array<vec4<f32>>;
@group(0) @binding(11) 
var<storage, read_write> v_xy: array<vec2<f32>>;
@group(0) @binding(12) 
var<storage, read_write> v_rgb: array<vec4<f32>>;
@group(0) @binding(13) 
var<storage, read_write> locks: array<atomic<u32>>;
@group(0) @binding(14) 
var<storage> info_array: array<Uniforms>;
var<workgroup> id_batch: array<u32, 256>;
var<workgroup> xy_batch: array<vec2<f32>, 256>;
var<workgroup> opacity_batch: array<f32, 256>;
var<workgroup> conic_batch: array<vec4<f32>, 256>;
var<workgroup> rgbs_batch: array<vec3<f32>, 256>;

@compute @workgroup_size(16, 16, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_index) local_idx: u32, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    var T: f32;
    var buffer: vec3<f32> = vec3<f32>(0f, 0f, 0f);
    var bin_final: u32;
    var num_batches: u32;
    var batch: u32 = 0u;
    var t: u32;
    var v_alpha: f32;

    let info = info_array[0];
    let tile_bounds = info.tile_bounds;
    let background = info.background;
    let img_size = info.img_size;
    let tile_id = (workgroup_id.x + (workgroup_id.y * tile_bounds.x));
    let px = (f32(global_id.x) + 0.5f);
    let py = (f32(global_id.y) + 0.5f);
    let pix_id = (global_id.x + (global_id.y * img_size.x));
    let inside = ((global_id.x < img_size.x) && (global_id.y < img_size.y));
    let T_final = output[pix_id].w;
    T = T_final;
    let range = tile_bins[tile_id];
    let bin_start = range.x;
    bin_final = range.y;
    if inside {
        let _e49 = final_index[pix_id];
        bin_final = _e49;
    }
    let v_out = v_output[pix_id];
    let _e53 = bin_final;
    num_batches = ((((_e53 - bin_start) + BLOCK_SIZE) - 1u) / BLOCK_SIZE);
    loop {
        let _e63 = batch;
        let _e64 = num_batches;
        if (_e63 < _e64) {
        } else {
            break;
        }
        {
            let _e66 = bin_final;
            let _e69 = batch;
            let gauss_idx_start = ((_e66 - 1u) - (_e69 * BLOCK_SIZE));
            let gauss_idx = (gauss_idx_start - local_idx);
            if (gauss_idx >= range.x) {
                let g_id = gaussian_ids_sorted[gauss_idx];
                id_batch[local_idx] = g_id;
                let _e86 = xys[g_id];
                xy_batch[local_idx] = _e86;
                let _e91 = conics[g_id];
                conic_batch[local_idx] = _e91;
                let _e96 = opacities[g_id];
                opacity_batch[local_idx] = _e96;
                let _e101 = colors[g_id];
                rgbs_batch[local_idx] = _e101.xyz;
            }
            workgroupBarrier();
            let remaining = min(BLOCK_SIZE, ((gauss_idx_start + 1u) - range.x));
            if inside {
                t = 0u;
                loop {
                    let _e111 = t;
                    if (_e111 < remaining) {
                    } else {
                        break;
                    }
                    {
                        let _e114 = t;
                        let conic = conic_batch[_e114];
                        let _e118 = t;
                        let _e120 = xy_batch[_e118];
                        let delta = (_e120 - vec2<f32>(px, py));
                        let sigma = ((0.5f * (((conic.x * delta.x) * delta.x) + ((conic.z * delta.y) * delta.y))) + ((conic.y * delta.x) * delta.y));
                        let _e143 = t;
                        let opac = opacity_batch[_e143];
                        let vis = exp(-(sigma));
                        let alpha = min(0.99f, (opac * vis));
                        if ((sigma < 0f) || (alpha < 0.003921569f)) {
                            continue;
                        }
                        let ra = (1f / (1f - alpha));
                        let _e160 = T;
                        T = (_e160 * ra);
                        let _e162 = T;
                        let fac = (alpha * _e162);
                        let v_rgb_local = (fac * v_out);
                        v_alpha = 0f;
                        let _e168 = t;
                        let rgb = rgbs_batch[_e168];
                        let _e173 = T;
                        let _e176 = buffer.x;
                        let _e181 = v_alpha;
                        v_alpha = (_e181 + (((rgb.x * _e173) - (_e176 * ra)) * v_out.x));
                        let _e184 = T;
                        let _e187 = buffer.y;
                        let _e192 = v_alpha;
                        v_alpha = (_e192 + (((rgb.y * _e184) - (_e187 * ra)) * v_out.y));
                        let _e195 = T;
                        let _e198 = buffer.z;
                        let _e203 = v_alpha;
                        v_alpha = (_e203 + (((rgb.z * _e195) - (_e198 * ra)) * v_out.z));
                        let _e211 = v_alpha;
                        v_alpha = (_e211 + (((-(T_final) * ra) * background.x) * v_out.x));
                        let _e219 = v_alpha;
                        v_alpha = (_e219 + (((-(T_final) * ra) * background.y) * v_out.y));
                        let _e227 = v_alpha;
                        v_alpha = (_e227 + (((-(T_final) * ra) * background.z) * v_out.z));
                        let _e230 = buffer;
                        buffer = (_e230 + (rgb * fac));
                        let _e234 = v_alpha;
                        let v_sigma = ((-(opac) * vis) * _e234);
                        let v_conic_local = vec3<f32>((((0.5f * v_sigma) * delta.x) * delta.x), ((v_sigma * delta.x) * delta.y), (((0.5f * v_sigma) * delta.y) * delta.y));
                        let v_xy_local = (v_sigma * vec2<f32>(((conic.x * delta.x) + (conic.y * delta.y)), ((conic.y * delta.x) + (conic.z * delta.y))));
                        let _e269 = v_alpha;
                        let v_opacity_local = (vis * _e269);
                        let _e272 = t;
                        let g_id_1 = id_batch[_e272];
                        workgroupBarrier();
                        let _e277 = v_opacity[g_id_1];
                        v_opacity[g_id_1] = (_e277 + v_opacity_local);
                        let _e281 = v_rgb[g_id_1];
                        v_rgb[g_id_1] = (_e281 + v_rgb_local);
                        let _e287 = v_conic[g_id_1];
                        v_conic[g_id_1] = (_e287 + vec4<f32>(v_conic_local, 0f));
                        let _e291 = v_xy[g_id_1];
                        v_xy[g_id_1] = (_e291 + v_xy_local);
                        atomicStore((&locks[g_id_1]), 0u);
                    }
                    continuing {
                        let _e297 = t;
                        t = (_e297 + 1u);
                    }
                }
                if (local_idx == 0u) {
                    let g_id_2 = id_batch[0];
                }
            }
        }
        continuing {
            let _e305 = batch;
            batch = (_e305 + 1u);
        }
    }
    return;
}
"#;
}
pub mod project_backwards {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 4, offset: 0x0, type: `u32`
        pub num_points: u32,
        /// size: 4, offset: 0x4, type: `f32`
        pub glob_scale: f32,
        pub _pad_glob_scale: [u8; 0xC - core::mem::size_of::<f32>()],
        /// size: 64, offset: 0x10, type: `mat4x4<f32>`
        pub viewmat: glam::Mat4,
        /// size: 16, offset: 0x50, type: `vec4<f32>`
        pub intrins: glam::Vec4,
        /// size: 8, offset: 0x60, type: `vec2<u32>`
        pub img_size: [u32; 2],
        pub _pad_img_size: [u8; 0x10 - core::mem::size_of::<[u32; 2]>()],
    }
    impl Uniforms {
        pub const fn new(
            num_points: u32,
            glob_scale: f32,
            viewmat: glam::Mat4,
            intrins: glam::Vec4,
            img_size: [u32; 2],
        ) -> Self {
            Self {
                num_points,
                glob_scale,
                _pad_glob_scale: [0; 0xC - core::mem::size_of::<f32>()],
                viewmat,
                intrins,
                img_size,
                _pad_img_size: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct UniformsInit {
        pub num_points: u32,
        pub glob_scale: f32,
        pub viewmat: glam::Mat4,
        pub intrins: glam::Vec4,
        pub img_size: [u32; 2],
    }
    impl UniformsInit {
        pub const fn build(&self) -> Uniforms {
            Uniforms {
                num_points: self.num_points,
                glob_scale: self.glob_scale,
                _pad_glob_scale: [0; 0xC - core::mem::size_of::<f32>()],
                viewmat: self.viewmat,
                intrins: self.intrins,
                img_size: self.img_size,
                _pad_img_size: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
            }
        }
    }
    impl From<UniformsInit> for Uniforms {
        fn from(data: UniformsInit) -> Self {
            data.build()
        }
    }
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub means: wgpu::BufferBinding<'a>,
            pub scales: wgpu::BufferBinding<'a>,
            pub quats: wgpu::BufferBinding<'a>,
            pub radii: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub compensation: wgpu::BufferBinding<'a>,
            pub v_xy: wgpu::BufferBinding<'a>,
            pub v_conic: wgpu::BufferBinding<'a>,
            pub v_means: wgpu::BufferBinding<'a>,
            pub v_scales: wgpu::BufferBinding<'a>,
            pub v_quats: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 12] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.means),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.scales),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.quats),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.radii),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.compensation),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.v_xy),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.v_conic),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.v_means),
                    },
                    wgpu::BindGroupEntry {
                        binding: 9,
                        resource: wgpu::BindingResource::Buffer(self.v_scales),
                    },
                    wgpu::BindGroupEntry {
                        binding: 10,
                        resource: wgpu::BindingResource::Buffer(self.v_quats),
                    },
                    wgpu::BindGroupEntry {
                        binding: 11,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("ProjectBackwards::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 9,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 10,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 11,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("ProjectBackwards::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("ProjectBackwards::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("project_backwards.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    num_points: u32,
    glob_scale: f32,
    viewmat: mat4x4<f32>,
    intrins: vec4<f32>,
    img_size: vec2<u32>,
}

@group(0) @binding(0) 
var<storage> means: array<vec4<f32>>;
@group(0) @binding(1) 
var<storage> scales: array<vec4<f32>>;
@group(0) @binding(2) 
var<storage> quats: array<vec4<f32>>;
@group(0) @binding(3) 
var<storage> radii: array<f32>;
@group(0) @binding(4) 
var<storage> conics: array<vec4<f32>>;
@group(0) @binding(5) 
var<storage> compensation: array<f32>;
@group(0) @binding(6) 
var<storage> v_xy_1: array<vec2<f32>>;
@group(0) @binding(7) 
var<storage> v_conic_1: array<vec4<f32>>;
@group(0) @binding(8) 
var<storage, read_write> v_means: array<vec4<f32>>;
@group(0) @binding(9) 
var<storage, read_write> v_scales: array<vec4<f32>>;
@group(0) @binding(10) 
var<storage, read_write> v_quats: array<vec4<f32>>;
@group(0) @binding(11) 
var<storage> info_array: array<Uniforms>;

fn quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat: vec4<f32>) -> mat3x3<f32> {
    let quat_norm = normalize((quat + vec4(0.000001f)));
    let w = quat_norm.x;
    let x = quat_norm.y;
    let y = quat_norm.z;
    let z = quat_norm.w;
    return mat3x3<f32>(vec3<f32>((1f - (2f * ((y * y) + (z * z)))), (2f * ((x * y) + (w * z))), (2f * ((x * z) - (w * y)))), vec3<f32>((2f * ((x * y) - (w * z))), (1f - (2f * ((x * x) + (z * z)))), (2f * ((y * z) + (w * x)))), vec3<f32>((2f * ((x * z) + (w * y))), (2f * ((y * z) - (w * x))), (1f - (2f * ((x * x) + (y * y))))));
}

fn project_pix_vjp(fxfy: vec2<f32>, p_view: vec3<f32>, v_xy: vec2<f32>) -> vec3<f32> {
    let rw = (1f / (p_view.z + 0.000001f));
    let v_proj = vec2<f32>((fxfy.x * v_xy.x), (fxfy.y * v_xy.y));
    return vec3<f32>((v_proj.x * rw), (v_proj.y * rw), ((-(((v_proj.x * p_view.x) + (v_proj.y * p_view.y))) * rw) * rw));
}

fn quat_to_rotmat_vjp(quat_1: vec4<f32>, v_R: mat3x3<f32>) -> vec4<f32> {
    let quat_norm_1 = normalize((quat_1 + vec4(0.000001f)));
    let w_1 = quat_norm_1.x;
    let x_1 = quat_norm_1.y;
    let y_1 = quat_norm_1.z;
    let z_1 = quat_norm_1.w;
    return vec4<f32>((2f * (((x_1 * (v_R[1].z - v_R[2].y)) + (y_1 * (v_R[2].x - v_R[0].z))) + (z_1 * (v_R[0].y - v_R[1].x)))), (2f * (((((-2f * x_1) * (v_R[1].y + v_R[2].z)) + (y_1 * (v_R[0].y + v_R[1].x))) + (z_1 * (v_R[0].z + v_R[2].x))) + (w_1 * (v_R[1].z - v_R[2].y)))), (2f * ((((x_1 * (v_R[0].y + v_R[1].x)) - ((2f * y_1) * (v_R[0].x + v_R[2].z))) + (z_1 * (v_R[1].z + v_R[2].y))) + (w_1 * (v_R[2].x - v_R[0].z)))), (2f * ((((x_1 * (v_R[0].z + v_R[2].x)) + (y_1 * (v_R[1].z + v_R[2].y))) - ((2f * z_1) * (v_R[0].x + v_R[1].y))) + (w_1 * (v_R[0].y - v_R[1].x)))));
}

fn cov2d_to_conic_vjp(conic: vec3<f32>, v_conic: vec3<f32>) -> vec3<f32> {
    let X = mat2x2<f32>(vec2<f32>(conic.x, conic.y), vec2<f32>(conic.y, conic.z));
    let G = mat2x2<f32>(vec2<f32>(v_conic.x, (v_conic.y / 2f)), vec2<f32>((v_conic.y / 2f), v_conic.z));
    let v_Sigma = ((X * G) * X);
    return -(vec3<f32>(v_Sigma[0].x, (v_Sigma[1].x + v_Sigma[0].y), v_Sigma[1].y));
}

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_id) local_id: vec3<u32>, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    var v_mean: vec3<f32>;

    let idx = global_id.x;
    let info = info_array[0];
    let num_points = info.num_points;
    let _e9 = radii[idx];
    if ((idx >= num_points) || (_e9 <= 0f)) {
        return;
    }
    let intrins = info.intrins;
    let viewmat = info.viewmat;
    let glob_scale = info.glob_scale;
    let _e18 = means[idx];
    let mean = _e18.xyz;
    let quat_2 = quats[idx];
    let scale = scales[idx];
    let fx = intrins.x;
    let fy = intrins.y;
    let cx = intrins.z;
    let cy = intrins.w;
    let W = mat3x3<f32>(viewmat[0].xyz, viewmat[1].xyz, viewmat[2].xyz);
    let p_view_1 = ((W * mean) + viewmat[3].xyz);
    let _e44 = v_xy_1[idx];
    let _e45 = project_pix_vjp(vec2<f32>(fx, fy), p_view_1, _e44);
    v_mean = (transpose(W) * _e45);
    let _e51 = conics[idx];
    let conic_1 = _e51.xyz;
    let _e55 = v_conic_1[idx];
    let v_conic_2 = _e55.xyz;
    let _e57 = cov2d_to_conic_vjp(conic_1, v_conic_2);
    let comp = compensation[idx];
    let rz = (1f / p_view_1.z);
    let rz2_ = (rz * rz);
    let J = mat3x3<f32>(vec3<f32>((fx * rz), 0f, 0f), vec3<f32>(0f, (fy * rz), 0f), vec3<f32>(((-(fx) * p_view_1.x) * rz2_), ((-(fy) * p_view_1.y) * rz2_), 0f));
    let _e84 = quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat_2);
    let scale_total = (scale * glob_scale);
    let S = mat3x3<f32>(vec3<f32>(scale_total.x, 0f, 0f), vec3<f32>(0f, scale_total.y, 0f), vec3<f32>(0f, 0f, scale_total.z));
    let M = (_e84 * S);
    let V = (M * transpose(M));
    let v_cov = mat3x3<f32>(vec3<f32>(_e57.x, (0.5f * _e57.y), 0f), vec3<f32>((0.5f * _e57.y), _e57.z, 0f), vec3<f32>(0f, 0f, 0f));
    let T = (J * W);
    let Tt = transpose(T);
    let Vt = transpose(V);
    let v_V = ((Tt * v_cov) * T);
    let v_T = (((v_cov * T) * Vt) + ((transpose(v_cov) * T) * V));
    let v_cov3d0_ = v_V[0].x;
    let v_cov3d1_ = (v_V[0].y + v_V[1].x);
    let v_cov3d2_ = (v_V[0].z + v_V[2].x);
    let v_cov3d3_ = v_V[1].y;
    let v_cov3d4_ = (v_V[1].z + v_V[2].y);
    let v_cov3d5_ = v_V[2].z;
    let v_J = (v_T * transpose(W));
    let rz3_ = (rz2_ * rz);
    let v_t = vec3<f32>(((-(fx) * rz2_) * v_J[2].x), ((-(fy) * rz2_) * v_J[2].y), (((((-(fx) * rz2_) * v_J[0].x) + ((((2f * fx) * p_view_1.x) * rz3_) * v_J[2].x)) - ((fy * rz2_) * v_J[1].y)) + ((((2f * fy) * p_view_1.y) * rz3_) * v_J[2].y)));
    let _e196 = v_mean.x;
    v_mean.x = (_e196 + dot(v_t, W[0]));
    let _e201 = v_mean.y;
    v_mean.y = (_e201 + dot(v_t, W[1]));
    let _e206 = v_mean.z;
    v_mean.z = (_e206 + dot(v_t, W[2]));
    let v_V_symm = mat3x3<f32>(vec3<f32>(v_cov3d0_, (0.5f * v_cov3d1_), (0.5f * v_cov3d2_)), vec3<f32>((0.5f * v_cov3d1_), v_cov3d3_, (0.5f * v_cov3d4_)), vec3<f32>((0.5f * v_cov3d2_), (0.5f * v_cov3d4_), v_cov3d5_));
    let v_M = ((2f * v_V_symm) * M);
    let v_scale = vec3<f32>((dot(_e84[0], v_M[0]) * glob_scale), (dot(_e84[1], v_M[1]) * glob_scale), (dot(_e84[2], v_M[2]) * glob_scale));
    let v_R_1 = (v_M * S);
    let _e241 = quat_to_rotmat_vjp(quat_2, v_R_1);
    v_quats[idx] = _e241;
    v_scales[idx] = vec4<f32>(v_scale, 0f);
    let _e250 = v_mean;
    v_means[idx] = vec4<f32>(_e250, 0f);
    return;
}
"#;
}
