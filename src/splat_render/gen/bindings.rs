// File automatically generated by wgsl_bindgen^
//
// ^ wgsl_bindgen version 0.10.1
// Changes made to this file will not be saved.
// SourceHash: 745848f32ea88aa2aa5be7a2b62d685e97c6110454d8ccbf187ef7a1b2ac0dac

#![allow(unused, non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum ShaderEntry {
    ProjectForward,
    MapGaussianToIntersects,
    GetTileBinEdges,
    Rasterize,
    RasterizeBackwards,
    ProjectBackwards,
}
impl ShaderEntry {
    pub fn create_pipeline_layout(&self, device: &wgpu::Device) -> wgpu::PipelineLayout {
        match self {
            Self::ProjectForward => project_forward::create_pipeline_layout(device),
            Self::MapGaussianToIntersects => {
                map_gaussian_to_intersects::create_pipeline_layout(device)
            }
            Self::GetTileBinEdges => get_tile_bin_edges::create_pipeline_layout(device),
            Self::Rasterize => rasterize::create_pipeline_layout(device),
            Self::RasterizeBackwards => {
                rasterize_backwards::create_pipeline_layout(device)
            }
            Self::ProjectBackwards => project_backwards::create_pipeline_layout(device),
        }
    }
    pub fn create_shader_module_embed_source(
        &self,
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        match self {
            Self::ProjectForward => {
                project_forward::create_shader_module_embed_source(device)
            }
            Self::MapGaussianToIntersects => {
                map_gaussian_to_intersects::create_shader_module_embed_source(device)
            }
            Self::GetTileBinEdges => {
                get_tile_bin_edges::create_shader_module_embed_source(device)
            }
            Self::Rasterize => rasterize::create_shader_module_embed_source(device),
            Self::RasterizeBackwards => {
                rasterize_backwards::create_shader_module_embed_source(device)
            }
            Self::ProjectBackwards => {
                project_backwards::create_shader_module_embed_source(device)
            }
        }
    }
}
mod _root {
    pub use super::*;
}
pub mod layout_asserts {
    use super::{_root, _root::*};
    const WGSL_BASE_TYPE_ASSERTS: () = {
        assert!(std::mem::size_of:: < glam::Vec3A > () == 16);
        assert!(std::mem::align_of:: < glam::Vec3A > () == 16);
        assert!(std::mem::size_of:: < glam::Vec4 > () == 16);
        assert!(std::mem::align_of:: < glam::Vec4 > () == 16);
        assert!(std::mem::size_of:: < glam::Mat3A > () == 48);
        assert!(std::mem::align_of:: < glam::Mat3A > () == 16);
        assert!(std::mem::size_of:: < glam::Mat4 > () == 64);
        assert!(std::mem::align_of:: < glam::Mat4 > () == 16);
    };
    const PROJECT_FORWARD_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(project_forward::Uniforms, viewmat) == 0);
        assert!(std::mem::offset_of!(project_forward::Uniforms, focal) == 64);
        assert!(std::mem::offset_of!(project_forward::Uniforms, pixel_center) == 72);
        assert!(std::mem::offset_of!(project_forward::Uniforms, img_size) == 80);
        assert!(std::mem::offset_of!(project_forward::Uniforms, tile_bounds) == 88);
        assert!(std::mem::offset_of!(project_forward::Uniforms, clip_thresh) == 96);
        assert!(std::mem::offset_of!(project_forward::Uniforms, block_width) == 100);
        assert!(std::mem::size_of:: < project_forward::Uniforms > () == 112);
    };
    const MAP_GAUSSIAN_TO_INTERSECTS_UNIFORMS_ASSERTS: () = {
        assert!(
            std::mem::offset_of!(map_gaussian_to_intersects::Uniforms, tile_bounds) == 0
        );
        assert!(
            std::mem::offset_of!(map_gaussian_to_intersects::Uniforms, block_width) == 8
        );
        assert!(std::mem::size_of:: < map_gaussian_to_intersects::Uniforms > () == 16);
    };
    const RASTERIZE_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(rasterize::Uniforms, tile_bounds) == 0);
        assert!(std::mem::offset_of!(rasterize::Uniforms, background) == 16);
        assert!(std::mem::offset_of!(rasterize::Uniforms, img_size) == 32);
        assert!(std::mem::size_of:: < rasterize::Uniforms > () == 48);
    };
    const RASTERIZE_BACKWARDS_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(rasterize_backwards::Uniforms, img_size) == 0);
        assert!(std::mem::offset_of!(rasterize_backwards::Uniforms, tile_bounds) == 8);
        assert!(std::mem::offset_of!(rasterize_backwards::Uniforms, background) == 16);
        assert!(std::mem::size_of:: < rasterize_backwards::Uniforms > () == 32);
    };
    const PROJECT_BACKWARDS_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(project_backwards::Uniforms, viewmat) == 0);
        assert!(std::mem::offset_of!(project_backwards::Uniforms, focal) == 64);
        assert!(std::mem::offset_of!(project_backwards::Uniforms, img_size) == 72);
        assert!(std::mem::size_of:: < project_backwards::Uniforms > () == 80);
    };
}
pub mod project_forward {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 64, offset: 0x0, type: `mat4x4<f32>`
        pub viewmat: glam::Mat4,
        /// size: 8, offset: 0x40, type: `vec2<f32>`
        pub focal: [f32; 2],
        /// size: 8, offset: 0x48, type: `vec2<f32>`
        pub pixel_center: [f32; 2],
        /// size: 8, offset: 0x50, type: `vec2<u32>`
        pub img_size: [u32; 2],
        /// size: 8, offset: 0x58, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        /// size: 4, offset: 0x60, type: `f32`
        pub clip_thresh: f32,
        /// size: 4, offset: 0x64, type: `u32`
        pub block_width: u32,
        pub _pad_block_width: [u8; 0xC - core::mem::size_of::<u32>()],
    }
    impl Uniforms {
        pub const fn new(
            viewmat: glam::Mat4,
            focal: [f32; 2],
            pixel_center: [f32; 2],
            img_size: [u32; 2],
            tile_bounds: [u32; 2],
            clip_thresh: f32,
            block_width: u32,
        ) -> Self {
            Self {
                viewmat,
                focal,
                pixel_center,
                img_size,
                tile_bounds,
                clip_thresh,
                block_width,
                _pad_block_width: [0; 0xC - core::mem::size_of::<u32>()],
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct UniformsInit {
        pub viewmat: glam::Mat4,
        pub focal: [f32; 2],
        pub pixel_center: [f32; 2],
        pub img_size: [u32; 2],
        pub tile_bounds: [u32; 2],
        pub clip_thresh: f32,
        pub block_width: u32,
    }
    impl UniformsInit {
        pub const fn build(&self) -> Uniforms {
            Uniforms {
                viewmat: self.viewmat,
                focal: self.focal,
                pixel_center: self.pixel_center,
                img_size: self.img_size,
                tile_bounds: self.tile_bounds,
                clip_thresh: self.clip_thresh,
                block_width: self.block_width,
                _pad_block_width: [0; 0xC - core::mem::size_of::<u32>()],
            }
        }
    }
    impl From<UniformsInit> for Uniforms {
        fn from(data: UniformsInit) -> Self {
            data.build()
        }
    }
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub means: wgpu::BufferBinding<'a>,
            pub scales: wgpu::BufferBinding<'a>,
            pub quats: wgpu::BufferBinding<'a>,
            pub xys: wgpu::BufferBinding<'a>,
            pub depths: wgpu::BufferBinding<'a>,
            pub radii: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub compensation: wgpu::BufferBinding<'a>,
            pub num_tiles_hit: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 10] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.means),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.scales),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.quats),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.depths),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.radii),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.compensation),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.num_tiles_hit),
                    },
                    wgpu::BindGroupEntry {
                        binding: 9,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("ProjectForward::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 9,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("ProjectForward::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("ProjectForward::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("project_forward.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    viewmat: mat4x4<f32>,
    focal: vec2<f32>,
    pixel_center: vec2<f32>,
    img_size: vec2<u32>,
    tile_bounds: vec2<u32>,
    clip_thresh: f32,
    block_width: u32,
}

@group(0) @binding(0) 
var<storage> means: array<vec4<f32>>;
@group(0) @binding(1) 
var<storage> scales: array<vec4<f32>>;
@group(0) @binding(2) 
var<storage> quats: array<vec4<f32>>;
@group(0) @binding(3) 
var<storage, read_write> xys: array<vec2<f32>>;
@group(0) @binding(4) 
var<storage, read_write> depths: array<f32>;
@group(0) @binding(5) 
var<storage, read_write> radii: array<i32>;
@group(0) @binding(6) 
var<storage, read_write> conics: array<vec4<f32>>;
@group(0) @binding(7) 
var<storage, read_write> compensation: array<f32>;
@group(0) @binding(8) 
var<storage, read_write> num_tiles_hit: array<i32>;
@group(0) @binding(9) 
var<storage> info_array: array<Uniforms>;

fn get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(center: vec2<f32>, dims: vec2<f32>, bounds: vec2<u32>) -> vec4<u32> {
    let min = vec2<u32>(clamp(vec2<i32>((center - dims)), vec2(0i), vec2<i32>(bounds)));
    let max = vec2<u32>(clamp(vec2<i32>(((center + dims) + vec2(1f))), vec2(0i), vec2<i32>(bounds)));
    return vec4<u32>(min, max);
}

fn get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(pix_center: vec2<f32>, pix_radius: i32, tile_bounds: vec2<u32>, block_size: u32) -> vec4<u32> {
    let tile_center = (pix_center / vec2(f32(block_size)));
    let tile_radius = (f32(pix_radius) / f32(block_size));
    let _e11 = get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(tile_center, vec2<f32>(tile_radius, tile_radius), tile_bounds);
    return _e11;
}

fn quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat: vec4<f32>) -> mat3x3<f32> {
    let quat_norm = normalize((quat + vec4(0.000001f)));
    let w = quat_norm.x;
    let x = quat_norm.y;
    let y = quat_norm.z;
    let z = quat_norm.w;
    return mat3x3<f32>(vec3<f32>((1f - (2f * ((y * y) + (z * z)))), (2f * ((x * y) + (w * z))), (2f * ((x * z) - (w * y)))), vec3<f32>((2f * ((x * y) - (w * z))), (1f - (2f * ((x * x) + (z * z)))), (2f * ((y * z) + (w * x)))), vec3<f32>((2f * ((x * z) + (w * y))), (2f * ((y * z) - (w * x))), (1f - (2f * ((x * x) + (y * y))))));
}

fn scale_to_matX_naga_oil_mod_XNBSWY4DFOJZQX(scale: vec3<f32>) -> mat3x3<f32> {
    return mat3x3<f32>(vec3<f32>(scale.x, 0f, 0f), vec3<f32>(0f, scale.y, 0f), vec3<f32>(0f, 0f, scale.z));
}

fn project_pix(fxfy: vec2<f32>, p_view: vec3<f32>, pp: vec2<f32>) -> vec2<f32> {
    let p_proj = (p_view.xy / vec2(max(p_view.z, 0.000001f)));
    return ((p_proj * fxfy) + pp);
}

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let idx = global_id.x;
    let info = info_array[0];
    let num_points = arrayLength((&means));
    if (idx >= num_points) {
        return;
    }
    let viewmat = info.viewmat;
    let focal = info.focal;
    let pixel_center = info.pixel_center;
    let img_size = info.img_size;
    let tile_bounds_1 = info.tile_bounds;
    let block_width = info.block_width;
    let clip_thresh = info.clip_thresh;
    radii[idx] = 0i;
    num_tiles_hit[idx] = 0i;
    let _e23 = means[idx];
    let mean = _e23.xyz;
    let W = mat3x3<f32>(viewmat[0].xyz, viewmat[1].xyz, viewmat[2].xyz);
    let p_view_1 = ((W * mean) + viewmat[3].xyz);
    if (p_view_1.z <= clip_thresh) {
        return;
    }
    let _e40 = scales[idx];
    let scale_1 = _e40.xyz;
    let quat_1 = quats[idx];
    let _e45 = quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat_1);
    let _e46 = scale_to_matX_naga_oil_mod_XNBSWY4DFOJZQX(scale_1);
    let M = (_e45 * _e46);
    let V = (M * transpose(M));
    let tan_fov = ((0.5f * vec2<f32>(img_size.xy)) / focal);
    let lims = (1.3f * tan_fov);
    let t = (p_view_1.z * clamp((p_view_1.xy / vec2(p_view_1.z)), -(lims), lims));
    let rz = (1f / p_view_1.z);
    let rz2_ = (rz * rz);
    let J = mat3x3<f32>(vec3<f32>((focal.x * rz), 0f, 0f), vec3<f32>(0f, (focal.y * rz), 0f), vec3<f32>(((-(focal.x) * t.x) * rz2_), ((-(focal.y) * t.y) * rz2_), 0f));
    let T = (J * W);
    let cov = ((T * V) * transpose(T));
    let c00_ = cov[0].x;
    let c11_ = cov[1].y;
    let c01_ = cov[0].y;
    let cov2d = vec3<f32>((c00_ + 0.3f), c01_, (c11_ + 0.3f));
    let det = ((cov2d.x * cov2d.z) - (cov2d.y * cov2d.y));
    if (abs(det) < 0.000001f) {
        return;
    }
    let conic = (vec3<f32>(cov2d.z, -(cov2d.y), cov2d.x) / vec3(det));
    let b = (0.5f * (cov2d.x + cov2d.z));
    let v1_ = (b + sqrt(max(0.1f, ((b * b) - det))));
    let v2_ = (b - sqrt(max(0.1f, ((b * b) - det))));
    let radius = i32(ceil((3f * sqrt(max(0f, max(v1_, v2_))))));
    let _e149 = project_pix(focal, p_view_1, pixel_center);
    let _e150 = get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(_e149, radius, tile_bounds_1, block_width);
    let tile_area = ((_e150.z - _e150.x) * (_e150.w - _e150.y));
    if (tile_area <= 0u) {
        return;
    }
    num_tiles_hit[idx] = i32(tile_area);
    depths[idx] = p_view_1.z;
    radii[idx] = radius;
    xys[idx] = _e149;
    conics[idx] = vec4<f32>(conic, 1f);
    let det_orig = ((c00_ * c11_) - (c01_ * c01_));
    let det_blur = ((cov2d.x * cov2d.z) - (cov2d.y * cov2d.y));
    compensation[idx] = sqrt(max(0f, (det_orig / det_blur)));
    return;
}
"#;
}
pub mod bytemuck_impls {
    use super::{_root, _root::*};
    unsafe impl bytemuck::Zeroable for project_forward::Uniforms {}
    unsafe impl bytemuck::Pod for project_forward::Uniforms {}
    unsafe impl bytemuck::Zeroable for map_gaussian_to_intersects::Uniforms {}
    unsafe impl bytemuck::Pod for map_gaussian_to_intersects::Uniforms {}
    unsafe impl bytemuck::Zeroable for rasterize::Uniforms {}
    unsafe impl bytemuck::Pod for rasterize::Uniforms {}
    unsafe impl bytemuck::Zeroable for rasterize_backwards::Uniforms {}
    unsafe impl bytemuck::Pod for rasterize_backwards::Uniforms {}
    unsafe impl bytemuck::Zeroable for project_backwards::Uniforms {}
    unsafe impl bytemuck::Pod for project_backwards::Uniforms {}
}
pub mod map_gaussian_to_intersects {
    use super::{_root, _root::*};
    #[repr(C, align(8))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 8, offset: 0x0, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        /// size: 4, offset: 0x8, type: `u32`
        pub block_width: u32,
        pub _pad_block_width: [u8; 0x8 - core::mem::size_of::<u32>()],
    }
    impl Uniforms {
        pub const fn new(tile_bounds: [u32; 2], block_width: u32) -> Self {
            Self {
                tile_bounds,
                block_width,
                _pad_block_width: [0; 0x8 - core::mem::size_of::<u32>()],
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct UniformsInit {
        pub tile_bounds: [u32; 2],
        pub block_width: u32,
    }
    impl UniformsInit {
        pub const fn build(&self) -> Uniforms {
            Uniforms {
                tile_bounds: self.tile_bounds,
                block_width: self.block_width,
                _pad_block_width: [0; 0x8 - core::mem::size_of::<u32>()],
            }
        }
    }
    impl From<UniformsInit> for Uniforms {
        fn from(data: UniformsInit) -> Self {
            data.build()
        }
    }
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub xys: wgpu::BufferBinding<'a>,
            pub radii: wgpu::BufferBinding<'a>,
            pub cum_tiles_hit: wgpu::BufferBinding<'a>,
            pub isect_ids: wgpu::BufferBinding<'a>,
            pub gaussian_ids: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 6] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.radii),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.cum_tiles_hit),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.isect_ids),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.gaussian_ids),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("MapGaussianToIntersects::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("MapGaussianToIntersects::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("MapGaussianToIntersects::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("map_gaussian_to_intersects.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    tile_bounds: vec2<u32>,
    block_width: u32,
}

@group(0) @binding(0) 
var<storage> xys: array<vec2<f32>>;
@group(0) @binding(1) 
var<storage> radii: array<i32>;
@group(0) @binding(2) 
var<storage> cum_tiles_hit: array<u32>;
@group(0) @binding(3) 
var<storage, read_write> isect_ids: array<u32>;
@group(0) @binding(4) 
var<storage, read_write> gaussian_ids: array<u32>;
@group(0) @binding(5) 
var<storage> info_array: array<Uniforms>;

fn get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(center: vec2<f32>, dims: vec2<f32>, bounds: vec2<u32>) -> vec4<u32> {
    let min = vec2<u32>(clamp(vec2<i32>((center - dims)), vec2(0i), vec2<i32>(bounds)));
    let max = vec2<u32>(clamp(vec2<i32>(((center + dims) + vec2(1f))), vec2(0i), vec2<i32>(bounds)));
    return vec4<u32>(min, max);
}

fn get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(pix_center: vec2<f32>, pix_radius: i32, tile_bounds: vec2<u32>, block_size: u32) -> vec4<u32> {
    let tile_center = (pix_center / vec2(f32(block_size)));
    let tile_radius = (f32(pix_radius) / f32(block_size));
    let _e11 = get_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(tile_center, vec2<f32>(tile_radius, tile_radius), tile_bounds);
    return _e11;
}

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    var isect_idx: u32 = 0u;
    var ty: u32;
    var tx: u32;

    let idx = global_id.x;
    if (idx >= arrayLength((&radii))) {
        return;
    }
    let radius = radii[idx];
    if (radius <= 0i) {
        return;
    }
    let info = info_array[0];
    let tile_bounds_1 = info.tile_bounds;
    let block_width = info.block_width;
    let center_1 = xys[idx];
    let _e19 = get_tile_bboxX_naga_oil_mod_XNBSWY4DFOJZQX(center_1, radius, tile_bounds_1, block_width);
    let tile_min = _e19.xy;
    let tile_max = _e19.zw;
    if (idx > 0u) {
        let _e28 = cum_tiles_hit[(idx - 1u)];
        isect_idx = _e28;
    }
    ty = tile_min.y;
    loop {
        let _e32 = ty;
        if (_e32 < tile_max.y) {
        } else {
            break;
        }
        {
            tx = tile_min.x;
            loop {
                let _e37 = tx;
                if (_e37 < tile_max.x) {
                } else {
                    break;
                }
                {
                    let _e40 = tx;
                    let _e41 = ty;
                    let tile_id = (_e40 + (_e41 * tile_bounds_1.x));
                    let _e46 = isect_idx;
                    isect_ids[_e46] = tile_id;
                    let _e49 = isect_idx;
                    gaussian_ids[_e49] = idx;
                    let _e52 = isect_idx;
                    isect_idx = (_e52 + 1u);
                }
                continuing {
                    let _e55 = tx;
                    tx = (_e55 + 1u);
                }
            }
        }
        continuing {
            let _e58 = ty;
            ty = (_e58 + 1u);
        }
    }
    return;
}
"#;
}
pub mod get_tile_bin_edges {
    use super::{_root, _root::*};
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub isect_ids_sorted: wgpu::BufferBinding<'a>,
            pub tile_bins: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 2] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.isect_ids_sorted),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.tile_bins),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("GetTileBinEdges::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("GetTileBinEdges::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("GetTileBinEdges::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("get_tile_bin_edges.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
@group(0) @binding(0) 
var<storage> isect_ids_sorted: array<u32>;
@group(0) @binding(1) 
var<storage, read_write> tile_bins: array<vec2<u32>>;

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let idx = global_id.x;
    let num_intersects = arrayLength((&isect_ids_sorted));
    if (idx >= num_intersects) {
        return;
    }
    let cur_tile_idx = isect_ids_sorted[idx];
    if (idx == (num_intersects - 1u)) {
        tile_bins[cur_tile_idx].y = num_intersects;
    }
    if (idx == 0u) {
        tile_bins[cur_tile_idx].x = 0u;
        return;
    } else {
        let prev_tile_idx = isect_ids_sorted[(idx - 1u)];
        if (prev_tile_idx != cur_tile_idx) {
            tile_bins[prev_tile_idx].y = idx;
            tile_bins[cur_tile_idx].x = idx;
            return;
        } else {
            return;
        }
    }
}
"#;
}
pub mod rasterize {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 8, offset: 0x0, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        pub _pad_tile_bounds: [u8; 0x10 - core::mem::size_of::<[u32; 2]>()],
        /// size: 12, offset: 0x10, type: `vec3<f32>`
        pub background: glam::Vec3A,
        /// size: 8, offset: 0x20, type: `vec2<u32>`
        pub img_size: [u32; 2],
        pub _pad_img_size: [u8; 0x10 - core::mem::size_of::<[u32; 2]>()],
    }
    impl Uniforms {
        pub const fn new(
            tile_bounds: [u32; 2],
            background: glam::Vec3A,
            img_size: [u32; 2],
        ) -> Self {
            Self {
                tile_bounds,
                _pad_tile_bounds: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
                background,
                img_size,
                _pad_img_size: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct UniformsInit {
        pub tile_bounds: [u32; 2],
        pub background: glam::Vec3A,
        pub img_size: [u32; 2],
    }
    impl UniformsInit {
        pub const fn build(&self) -> Uniforms {
            Uniforms {
                tile_bounds: self.tile_bounds,
                _pad_tile_bounds: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
                background: self.background,
                img_size: self.img_size,
                _pad_img_size: [0; 0x10 - core::mem::size_of::<[u32; 2]>()],
            }
        }
    }
    impl From<UniformsInit> for Uniforms {
        fn from(data: UniformsInit) -> Self {
            data.build()
        }
    }
    pub const BLOCK_WIDTH: u32 = 16u32;
    pub const BLOCK_SIZE: u32 = 256u32;
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub gaussian_ids_sorted: wgpu::BufferBinding<'a>,
            pub tile_bins: wgpu::BufferBinding<'a>,
            pub xys: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub colors: wgpu::BufferBinding<'a>,
            pub opacities: wgpu::BufferBinding<'a>,
            pub out_img: wgpu::BufferBinding<'a>,
            pub final_index: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 9] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.gaussian_ids_sorted),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.tile_bins),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.colors),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.opacities),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.out_img),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.final_index),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("Rasterize::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("Rasterize::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [16, 16, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("Rasterize::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("rasterize.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    tile_bounds: vec2<u32>,
    background: vec3<f32>,
    img_size: vec2<u32>,
}

const BLOCK_WIDTH: u32 = 16u;
const BLOCK_SIZE: u32 = 256u;

@group(0) @binding(0) 
var<storage> gaussian_ids_sorted: array<u32>;
@group(0) @binding(1) 
var<storage> tile_bins: array<vec2<u32>>;
@group(0) @binding(2) 
var<storage> xys: array<vec2<f32>>;
@group(0) @binding(3) 
var<storage> conics: array<vec4<f32>>;
@group(0) @binding(4) 
var<storage> colors: array<vec4<f32>>;
@group(0) @binding(5) 
var<storage> opacities: array<f32>;
@group(0) @binding(6) 
var<storage, read_write> out_img: array<vec4<f32>>;
@group(0) @binding(7) 
var<storage, read_write> final_index: array<u32>;
@group(0) @binding(8) 
var<storage> info_array: array<Uniforms>;
var<workgroup> id_batch: array<u32, 256>;
var<workgroup> xy_batch: array<vec2<f32>, 256>;
var<workgroup> opacity_batch: array<f32, 256>;
var<workgroup> colors_batch: array<vec3<f32>, 256>;
var<workgroup> conic_batch: array<vec4<f32>, 256>;

@compute @workgroup_size(16, 16, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_id) local_id: vec3<u32>, @builtin(local_invocation_index) local_idx: u32, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    var done: bool = false;
    var T: f32 = 1f;
    var pix_out: vec3<f32> = vec3(0f);
    var final_idx: u32;
    var batch_start: u32;
    var t: u32;
    var sigma: f32;
    var alpha: f32;

    let info = info_array[0];
    let tile_bounds = info.tile_bounds;
    let background = info.background;
    let img_size = info.img_size;
    let tile_id = (workgroup_id.x + (workgroup_id.y * tile_bounds.x));
    let px = (f32(global_id.x) + 0.5f);
    let py = (f32(global_id.y) + 0.5f);
    let pix_id = (global_id.x + (global_id.y * img_size.x));
    let inside = ((global_id.x < img_size.x) && (global_id.y < img_size.y));
    if !(inside) {
        done = true;
    }
    let range = tile_bins[tile_id];
    final_idx = range.y;
    batch_start = range.x;
    loop {
        let _e47 = batch_start;
        if (_e47 < range.y) {
        } else {
            break;
        }
        {
            workgroupBarrier();
            let _e51 = batch_start;
            let idx = (_e51 + local_idx);
            if (idx < range.y) {
                let g_id = gaussian_ids_sorted[idx];
                id_batch[local_idx] = g_id;
                let _e64 = xys[g_id];
                xy_batch[local_idx] = _e64;
                let _e69 = opacities[g_id];
                opacity_batch[local_idx] = _e69;
                let _e74 = colors[g_id];
                colors_batch[local_idx] = _e74.xyz;
                let _e80 = conics[g_id];
                conic_batch[local_idx] = _e80;
            }
            workgroupBarrier();
            let _e82 = batch_start;
            let remaining = min(BLOCK_SIZE, (range.y - _e82));
            let _e86 = done;
            if !(_e86) {
                t = 0u;
                loop {
                    let _e90 = t;
                    if (_e90 < remaining) {
                    } else {
                        break;
                    }
                    {
                        let _e93 = t;
                        let xy = xy_batch[_e93];
                        let _e97 = t;
                        let opac = opacity_batch[_e97];
                        let _e101 = t;
                        let conic = conic_batch[_e101];
                        let delta = (xy - vec2<f32>(px, py));
                        sigma = ((0.5f * (((conic.x * delta.x) * delta.x) + ((conic.z * delta.y) * delta.y))) + ((conic.y * delta.x) * delta.y));
                        let _e127 = sigma;
                        alpha = min(0.999f, (opac * exp(-(_e127))));
                        let _e133 = sigma;
                        let _e136 = alpha;
                        if ((_e133 < 0f) || (_e136 < 0.003921569f)) {
                            continue;
                        }
                        let _e141 = T;
                        let _e142 = alpha;
                        let next_T = (_e141 * (1f - _e142));
                        if (next_T <= 0.0001f) {
                            done = true;
                            break;
                        }
                        let _e150 = t;
                        let g = id_batch[_e150];
                        let _e153 = alpha;
                        let _e154 = T;
                        let vis = (_e153 * _e154);
                        T = next_T;
                        let _e157 = t;
                        let _e159 = colors_batch[_e157];
                        let c = _e159.xyz;
                        let _e163 = pix_out;
                        pix_out = (_e163 + (c * vis));
                        let _e165 = batch_start;
                        let _e166 = t;
                        final_idx = (_e165 + _e166);
                    }
                    continuing {
                        let _e169 = t;
                        t = (_e169 + 1u);
                    }
                }
            }
        }
        continuing {
            let _e172 = batch_start;
            batch_start = (_e172 + BLOCK_SIZE);
        }
    }
    if inside {
        let _e176 = pix_out;
        let _e177 = T;
        let _e182 = T;
        out_img[pix_id] = vec4<f32>((_e176 + ((1f - _e177) * background)), _e182);
        let _e186 = final_idx;
        final_index[pix_id] = _e186;
        return;
    } else {
        return;
    }
}
"#;
}
pub mod rasterize_backwards {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 8, offset: 0x0, type: `vec2<u32>`
        pub img_size: [u32; 2],
        /// size: 8, offset: 0x8, type: `vec2<u32>`
        pub tile_bounds: [u32; 2],
        /// size: 12, offset: 0x10, type: `vec3<f32>`
        pub background: glam::Vec3A,
    }
    impl Uniforms {
        pub const fn new(
            img_size: [u32; 2],
            tile_bounds: [u32; 2],
            background: glam::Vec3A,
        ) -> Self {
            Self {
                img_size,
                tile_bounds,
                background,
            }
        }
    }
    pub const BLOCK_WIDTH: u32 = 16u32;
    pub const BLOCK_SIZE: u32 = 256u32;
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub gaussian_ids_sorted: wgpu::BufferBinding<'a>,
            pub tile_bins: wgpu::BufferBinding<'a>,
            pub xys: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub colors: wgpu::BufferBinding<'a>,
            pub opacities: wgpu::BufferBinding<'a>,
            pub final_index: wgpu::BufferBinding<'a>,
            pub output: wgpu::BufferBinding<'a>,
            pub v_output: wgpu::BufferBinding<'a>,
            pub v_opacity: wgpu::BufferBinding<'a>,
            pub v_conic: wgpu::BufferBinding<'a>,
            pub v_xy: wgpu::BufferBinding<'a>,
            pub v_rgb: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 14] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.gaussian_ids_sorted),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.tile_bins),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.xys),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.colors),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.opacities),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.final_index),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.output),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.v_output),
                    },
                    wgpu::BindGroupEntry {
                        binding: 9,
                        resource: wgpu::BindingResource::Buffer(self.v_opacity),
                    },
                    wgpu::BindGroupEntry {
                        binding: 10,
                        resource: wgpu::BindingResource::Buffer(self.v_conic),
                    },
                    wgpu::BindGroupEntry {
                        binding: 11,
                        resource: wgpu::BindingResource::Buffer(self.v_xy),
                    },
                    wgpu::BindGroupEntry {
                        binding: 12,
                        resource: wgpu::BindingResource::Buffer(self.v_rgb),
                    },
                    wgpu::BindGroupEntry {
                        binding: 13,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("RasterizeBackwards::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 9,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 10,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 11,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 12,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 13,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("RasterizeBackwards::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [16, 16, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("RasterizeBackwards::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("rasterize_backwards.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    img_size: vec2<u32>,
    tile_bounds: vec2<u32>,
    background: vec3<f32>,
}

const BLOCK_WIDTH: u32 = 16u;
const BLOCK_SIZE: u32 = 256u;

@group(0) @binding(0) 
var<storage> gaussian_ids_sorted: array<u32>;
@group(0) @binding(1) 
var<storage> tile_bins: array<vec2<u32>>;
@group(0) @binding(2) 
var<storage> xys: array<vec2<f32>>;
@group(0) @binding(3) 
var<storage> conics: array<vec4<f32>>;
@group(0) @binding(4) 
var<storage> colors: array<vec4<f32>>;
@group(0) @binding(5) 
var<storage> opacities: array<f32>;
@group(0) @binding(6) 
var<storage> final_index: array<u32>;
@group(0) @binding(7) 
var<storage> output: array<vec4<f32>>;
@group(0) @binding(8) 
var<storage> v_output: array<vec4<f32>>;
@group(0) @binding(9) 
var<storage, read_write> v_opacity: array<f32>;
@group(0) @binding(10) 
var<storage, read_write> v_conic: array<vec4<f32>>;
@group(0) @binding(11) 
var<storage, read_write> v_xy: array<vec2<f32>>;
@group(0) @binding(12) 
var<storage, read_write> v_rgb: array<vec4<f32>>;
@group(0) @binding(13) 
var<storage> info_array: array<Uniforms>;
var<workgroup> id_batch: array<u32, 256>;
var<workgroup> xy_batch: array<vec2<f32>, 256>;
var<workgroup> opacity_batch: array<f32, 256>;
var<workgroup> conic_batch: array<vec4<f32>, 256>;
var<workgroup> rgbs_batch: array<vec3<f32>, 256>;

@compute @workgroup_size(16, 16, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_index) local_idx: u32, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    var T: f32;
    var buffer: vec3<f32> = vec3<f32>(0f, 0f, 0f);
    var bin_final: u32;
    var num_batches: u32;
    var batch: u32 = 0u;
    var t: u32;
    var v_alpha: f32;

    let info = info_array[0];
    let tile_bounds = info.tile_bounds;
    let background = info.background;
    let img_size = info.img_size;
    let tile_id = (workgroup_id.x + (workgroup_id.y * tile_bounds.x));
    let px = (f32(global_id.x) + 0.5f);
    let py = (f32(global_id.y) + 0.5f);
    let pix_id = (global_id.x + (global_id.y * img_size.x));
    let inside = ((global_id.x < img_size.x) && (global_id.y < img_size.y));
    let T_final = output[pix_id].w;
    T = T_final;
    let range = tile_bins[tile_id];
    let bin_start = range.x;
    bin_final = range.y;
    if inside {
        let _e49 = final_index[pix_id];
        bin_final = _e49;
    }
    let _e52 = v_output[pix_id];
    let v_out = _e52.xyz;
    let _e54 = bin_final;
    num_batches = ((((_e54 - bin_start) + BLOCK_SIZE) - 1u) / BLOCK_SIZE);
    loop {
        let _e64 = batch;
        let _e65 = num_batches;
        if (_e64 < _e65) {
        } else {
            break;
        }
        {
            let _e67 = bin_final;
            let _e70 = batch;
            let gauss_idx_start = ((_e67 - 1u) - (_e70 * BLOCK_SIZE));
            workgroupBarrier();
            let gauss_idx = (gauss_idx_start - local_idx);
            if (gauss_idx >= range.x) {
                let g_id = gaussian_ids_sorted[gauss_idx];
                id_batch[local_idx] = g_id;
                let _e87 = xys[g_id];
                xy_batch[local_idx] = _e87;
                let _e92 = conics[g_id];
                conic_batch[local_idx] = _e92;
                let _e97 = opacities[g_id];
                opacity_batch[local_idx] = _e97;
                let _e102 = colors[g_id];
                rgbs_batch[local_idx] = _e102.xyz;
            }
            workgroupBarrier();
            let remaining = min(BLOCK_SIZE, ((gauss_idx_start + 1u) - range.x));
            if inside {
                t = 0u;
                loop {
                    let _e112 = t;
                    if (_e112 < remaining) {
                    } else {
                        break;
                    }
                    {
                        let _e115 = t;
                        let conic = conic_batch[_e115];
                        let _e119 = t;
                        let _e121 = xy_batch[_e119];
                        let delta = (_e121 - vec2<f32>(px, py));
                        let sigma = ((0.5f * (((conic.x * delta.x) * delta.x) + ((conic.z * delta.y) * delta.y))) + ((conic.y * delta.x) * delta.y));
                        let _e144 = t;
                        let opac = opacity_batch[_e144];
                        let vis = exp(-(sigma));
                        let alpha = min(0.99f, (opac * vis));
                        if ((sigma < 0f) || (alpha < 0.003921569f)) {
                            continue;
                        }
                        let ra = (1f / (1f - alpha));
                        let _e161 = T;
                        T = (_e161 * ra);
                        let _e163 = T;
                        let fac = (alpha * _e163);
                        let v_rgb_local = (fac * v_out);
                        v_alpha = 0f;
                        let _e169 = t;
                        let rgb = rgbs_batch[_e169];
                        let _e173 = T;
                        let _e175 = buffer;
                        let _e179 = v_alpha;
                        v_alpha = (_e179 + dot(((rgb * _e173) - (_e175 * ra)), v_out));
                        let _e184 = v_alpha;
                        v_alpha = (_e184 - dot(((T_final * ra) * background), v_out));
                        let _e187 = buffer;
                        buffer = (_e187 + (rgb * fac));
                        let _e191 = v_alpha;
                        let v_sigma = ((-(opac) * vis) * _e191);
                        let v_conic_local = vec3<f32>((((0.5f * v_sigma) * delta.x) * delta.x), ((v_sigma * delta.x) * delta.y), (((0.5f * v_sigma) * delta.y) * delta.y));
                        let v_xy_local = (v_sigma * vec2<f32>(((conic.x * delta.x) + (conic.y * delta.y)), ((conic.y * delta.x) + (conic.z * delta.y))));
                        let _e226 = v_alpha;
                        let v_opacity_local = (vis * _e226);
                        let _e229 = t;
                        let g_id_1 = id_batch[_e229];
                        let _e234 = v_opacity[g_id_1];
                        v_opacity[g_id_1] = (_e234 + v_opacity_local);
                        let _e240 = v_rgb[g_id_1];
                        v_rgb[g_id_1] = (_e240 + vec4<f32>(v_rgb_local, 0f));
                        let _e246 = v_conic[g_id_1];
                        v_conic[g_id_1] = (_e246 + vec4<f32>(v_conic_local, 0f));
                        let _e250 = v_xy[g_id_1];
                        v_xy[g_id_1] = (_e250 + v_xy_local);
                    }
                    continuing {
                        let _e253 = t;
                        t = (_e253 + 1u);
                    }
                }
            }
        }
        continuing {
            let _e256 = batch;
            batch = (_e256 + 1u);
        }
    }
    return;
}
"#;
}
pub mod project_backwards {
    use super::{_root, _root::*};
    #[repr(C, align(16))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
        /// size: 64, offset: 0x0, type: `mat4x4<f32>`
        pub viewmat: glam::Mat4,
        /// size: 8, offset: 0x40, type: `vec2<f32>`
        pub focal: [f32; 2],
        /// size: 8, offset: 0x48, type: `vec2<u32>`
        pub img_size: [u32; 2],
    }
    impl Uniforms {
        pub const fn new(
            viewmat: glam::Mat4,
            focal: [f32; 2],
            img_size: [u32; 2],
        ) -> Self {
            Self { viewmat, focal, img_size }
        }
    }
    pub mod bind_groups {
        #[derive(Debug)]
        pub struct WgpuBindGroupLayout0<'a> {
            pub means: wgpu::BufferBinding<'a>,
            pub scales: wgpu::BufferBinding<'a>,
            pub quats: wgpu::BufferBinding<'a>,
            pub radii: wgpu::BufferBinding<'a>,
            pub conics: wgpu::BufferBinding<'a>,
            pub compensation: wgpu::BufferBinding<'a>,
            pub v_xy: wgpu::BufferBinding<'a>,
            pub v_conic: wgpu::BufferBinding<'a>,
            pub v_means: wgpu::BufferBinding<'a>,
            pub v_scales: wgpu::BufferBinding<'a>,
            pub v_quats: wgpu::BufferBinding<'a>,
            pub info_array: wgpu::BufferBinding<'a>,
        }
        impl<'a> WgpuBindGroupLayout0<'a> {
            pub fn entries(self) -> [wgpu::BindGroupEntry<'a>; 12] {
                [
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(self.means),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(self.scales),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(self.quats),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(self.radii),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(self.conics),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(self.compensation),
                    },
                    wgpu::BindGroupEntry {
                        binding: 6,
                        resource: wgpu::BindingResource::Buffer(self.v_xy),
                    },
                    wgpu::BindGroupEntry {
                        binding: 7,
                        resource: wgpu::BindingResource::Buffer(self.v_conic),
                    },
                    wgpu::BindGroupEntry {
                        binding: 8,
                        resource: wgpu::BindingResource::Buffer(self.v_means),
                    },
                    wgpu::BindGroupEntry {
                        binding: 9,
                        resource: wgpu::BindingResource::Buffer(self.v_scales),
                    },
                    wgpu::BindGroupEntry {
                        binding: 10,
                        resource: wgpu::BindingResource::Buffer(self.v_quats),
                    },
                    wgpu::BindGroupEntry {
                        binding: 11,
                        resource: wgpu::BindingResource::Buffer(self.info_array),
                    },
                ]
            }
        }
        #[derive(Debug)]
        pub struct WgpuBindGroup0(wgpu::BindGroup);
        impl WgpuBindGroup0 {
            pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
                label: Some("ProjectBackwards::BindGroup0::LayoutDescriptor"),
                entries: &[
                    wgpu::BindGroupLayoutEntry {
                        binding: 0,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 1,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 2,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 3,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 4,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 5,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 6,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 7,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 8,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 9,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 10,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: false,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                    wgpu::BindGroupLayoutEntry {
                        binding: 11,
                        visibility: wgpu::ShaderStages::COMPUTE,
                        ty: wgpu::BindingType::Buffer {
                            ty: wgpu::BufferBindingType::Storage {
                                read_only: true,
                            },
                            has_dynamic_offset: false,
                            min_binding_size: None,
                        },
                        count: None,
                    },
                ],
            };
            pub fn get_bind_group_layout(
                device: &wgpu::Device,
            ) -> wgpu::BindGroupLayout {
                device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
            }
            pub fn from_bindings(
                device: &wgpu::Device,
                bindings: WgpuBindGroupLayout0,
            ) -> Self {
                let bind_group_layout = Self::get_bind_group_layout(&device);
                let entries = bindings.entries();
                let bind_group = device
                    .create_bind_group(
                        &wgpu::BindGroupDescriptor {
                            label: Some("ProjectBackwards::BindGroup0"),
                            layout: &bind_group_layout,
                            entries: &entries,
                        },
                    );
                Self(bind_group)
            }
            pub fn set<'a>(&'a self, render_pass: &mut wgpu::ComputePass<'a>) {
                render_pass.set_bind_group(0, &self.0, &[]);
            }
        }
        #[derive(Debug, Copy, Clone)]
        pub struct WgpuBindGroups<'a> {
            pub bind_group0: &'a WgpuBindGroup0,
        }
        impl<'a> WgpuBindGroups<'a> {
            pub fn set(&self, pass: &mut wgpu::ComputePass<'a>) {
                self.bind_group0.set(pass);
            }
        }
    }
    pub fn set_bind_groups<'a>(
        pass: &mut wgpu::ComputePass<'a>,
        bind_group0: &'a bind_groups::WgpuBindGroup0,
    ) {
        bind_group0.set(pass);
    }
    pub mod compute {
        pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [128, 1, 1];
        pub fn create_main_pipeline_embed_source(
            device: &wgpu::Device,
        ) -> wgpu::ComputePipeline {
            let module = super::create_shader_module_embed_source(device);
            let layout = super::create_pipeline_layout(device);
            device
                .create_compute_pipeline(
                    &wgpu::ComputePipelineDescriptor {
                        label: Some("Compute Pipeline main"),
                        layout: Some(&layout),
                        module: &module,
                        entry_point: "main",
                    },
                )
        }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
        pub fn bind_group_layout_entries(
            entries: [wgpu::BindGroupLayout; 1],
        ) -> [wgpu::BindGroupLayout; 1] {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
        device
            .create_pipeline_layout(
                &wgpu::PipelineLayoutDescriptor {
                    label: Some("ProjectBackwards::PipelineLayout"),
                    bind_group_layouts: &[
                        &bind_groups::WgpuBindGroup0::get_bind_group_layout(device),
                    ],
                    push_constant_ranges: &[],
                },
            )
    }
    pub fn create_shader_module_embed_source(
        device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device
            .create_shader_module(wgpu::ShaderModuleDescriptor {
                label: Some("project_backwards.wgsl"),
                source: wgpu::ShaderSource::Wgsl(source),
            })
    }
    pub const SHADER_STRING: &'static str = r#"
struct Uniforms {
    viewmat: mat4x4<f32>,
    focal: vec2<f32>,
    img_size: vec2<u32>,
}

@group(0) @binding(0) 
var<storage> means: array<vec4<f32>>;
@group(0) @binding(1) 
var<storage> scales: array<vec4<f32>>;
@group(0) @binding(2) 
var<storage> quats: array<vec4<f32>>;
@group(0) @binding(3) 
var<storage> radii: array<i32>;
@group(0) @binding(4) 
var<storage> conics: array<vec4<f32>>;
@group(0) @binding(5) 
var<storage> compensation: array<f32>;
@group(0) @binding(6) 
var<storage> v_xy_1: array<vec2<f32>>;
@group(0) @binding(7) 
var<storage> v_conic_1: array<vec4<f32>>;
@group(0) @binding(8) 
var<storage, read_write> v_means: array<vec4<f32>>;
@group(0) @binding(9) 
var<storage, read_write> v_scales: array<vec4<f32>>;
@group(0) @binding(10) 
var<storage, read_write> v_quats: array<vec4<f32>>;
@group(0) @binding(11) 
var<storage> info_array: array<Uniforms>;

fn quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat: vec4<f32>) -> mat3x3<f32> {
    let quat_norm = normalize((quat + vec4(0.000001f)));
    let w = quat_norm.x;
    let x = quat_norm.y;
    let y = quat_norm.z;
    let z = quat_norm.w;
    return mat3x3<f32>(vec3<f32>((1f - (2f * ((y * y) + (z * z)))), (2f * ((x * y) + (w * z))), (2f * ((x * z) - (w * y)))), vec3<f32>((2f * ((x * y) - (w * z))), (1f - (2f * ((x * x) + (z * z)))), (2f * ((y * z) + (w * x)))), vec3<f32>((2f * ((x * z) + (w * y))), (2f * ((y * z) - (w * x))), (1f - (2f * ((x * x) + (y * y))))));
}

fn scale_to_matX_naga_oil_mod_XNBSWY4DFOJZQX(scale: vec3<f32>) -> mat3x3<f32> {
    return mat3x3<f32>(vec3<f32>(scale.x, 0f, 0f), vec3<f32>(0f, scale.y, 0f), vec3<f32>(0f, 0f, scale.z));
}

fn project_pix_vjp(fxfy: vec2<f32>, p_view: vec3<f32>, v_xy: vec2<f32>) -> vec3<f32> {
    let rw = (1f / (p_view.z + 0.000001f));
    let v_proj = vec2<f32>((fxfy.x * v_xy.x), (fxfy.y * v_xy.y));
    return vec3<f32>((v_proj.x * rw), (v_proj.y * rw), ((-(((v_proj.x * p_view.x) + (v_proj.y * p_view.y))) * rw) * rw));
}

fn quat_to_rotmat_vjp(quat_1: vec4<f32>, v_R: mat3x3<f32>) -> vec4<f32> {
    let quat_norm_1 = normalize((quat_1 + vec4(0.000001f)));
    let w_1 = quat_norm_1.x;
    let x_1 = quat_norm_1.y;
    let y_1 = quat_norm_1.z;
    let z_1 = quat_norm_1.w;
    return vec4<f32>((2f * (((x_1 * (v_R[1].z - v_R[2].y)) + (y_1 * (v_R[2].x - v_R[0].z))) + (z_1 * (v_R[0].y - v_R[1].x)))), (2f * (((((-2f * x_1) * (v_R[1].y + v_R[2].z)) + (y_1 * (v_R[0].y + v_R[1].x))) + (z_1 * (v_R[0].z + v_R[2].x))) + (w_1 * (v_R[1].z - v_R[2].y)))), (2f * ((((x_1 * (v_R[0].y + v_R[1].x)) - ((2f * y_1) * (v_R[0].x + v_R[2].z))) + (z_1 * (v_R[1].z + v_R[2].y))) + (w_1 * (v_R[2].x - v_R[0].z)))), (2f * ((((x_1 * (v_R[0].z + v_R[2].x)) + (y_1 * (v_R[1].z + v_R[2].y))) - ((2f * z_1) * (v_R[0].x + v_R[1].y))) + (w_1 * (v_R[0].y - v_R[1].x)))));
}

fn cov2d_to_conic_vjp(conic: vec3<f32>, v_conic: vec3<f32>) -> vec3<f32> {
    let X = mat2x2<f32>(vec2<f32>(conic.x, conic.y), vec2<f32>(conic.y, conic.z));
    let G = mat2x2<f32>(vec2<f32>(v_conic.x, (v_conic.y / 2f)), vec2<f32>((v_conic.y / 2f), v_conic.z));
    let v_Sigma = ((X * G) * X);
    return -(vec3<f32>(v_Sigma[0].x, (v_Sigma[1].x + v_Sigma[0].y), v_Sigma[1].y));
}

@compute @workgroup_size(128, 1, 1) 
fn main(@builtin(global_invocation_id) global_id: vec3<u32>, @builtin(local_invocation_id) local_id: vec3<u32>, @builtin(workgroup_id) workgroup_id: vec3<u32>) {
    var v_mean: vec3<f32>;

    let idx = global_id.x;
    let info = info_array[0];
    let num_points = arrayLength((&means));
    let _e10 = radii[idx];
    if ((idx >= num_points) || (_e10 <= 0i)) {
        return;
    }
    let viewmat = info.viewmat;
    let focal = info.focal;
    let _e18 = means[idx];
    let mean = _e18.xyz;
    let _e22 = scales[idx];
    let scale_1 = _e22.xyz;
    let quat_2 = quats[idx];
    let W = mat3x3<f32>(viewmat[0].xyz, viewmat[1].xyz, viewmat[2].xyz);
    let p_view_1 = ((W * mean) + viewmat[3].xyz);
    let _e40 = v_xy_1[idx];
    let _e41 = project_pix_vjp(focal, p_view_1, _e40);
    v_mean = (transpose(W) * _e41);
    let _e47 = conics[idx];
    let conic_1 = _e47.xyz;
    let _e51 = v_conic_1[idx];
    let v_conic_2 = _e51.xyz;
    let _e53 = cov2d_to_conic_vjp(conic_1, v_conic_2);
    let comp = compensation[idx];
    let rz = (1f / p_view_1.z);
    let rz2_ = (rz * rz);
    let J = mat3x3<f32>(vec3<f32>((focal.x * rz), 0f, 0f), vec3<f32>(0f, (focal.y * rz), 0f), vec3<f32>(((-(focal.x) * p_view_1.x) * rz2_), ((-(focal.y) * p_view_1.y) * rz2_), 0f));
    let _e84 = quat_to_rotmatX_naga_oil_mod_XNBSWY4DFOJZQX(quat_2);
    let _e85 = scale_to_matX_naga_oil_mod_XNBSWY4DFOJZQX(scale_1);
    let M = (_e84 * _e85);
    let V = (M * transpose(M));
    let v_cov = mat3x3<f32>(vec3<f32>(_e53.x, (0.5f * _e53.y), 0f), vec3<f32>((0.5f * _e53.y), _e53.z, 0f), vec3<f32>(0f, 0f, 0f));
    let T = (J * W);
    let Tt = transpose(T);
    let Vt = transpose(V);
    let v_V = ((Tt * v_cov) * T);
    let v_T = (((v_cov * T) * Vt) + ((transpose(v_cov) * T) * V));
    let v_cov3d0_ = v_V[0].x;
    let v_cov3d1_ = (v_V[0].y + v_V[1].x);
    let v_cov3d2_ = (v_V[0].z + v_V[2].x);
    let v_cov3d3_ = v_V[1].y;
    let v_cov3d4_ = (v_V[1].z + v_V[2].y);
    let v_cov3d5_ = v_V[2].z;
    let v_J = (v_T * transpose(W));
    let rz3_ = (rz2_ * rz);
    let v_t = vec3<f32>(((-(focal.x) * rz2_) * v_J[2].x), ((-(focal.y) * rz2_) * v_J[2].y), (((((-(focal.x) * rz2_) * v_J[0].x) + ((((2f * focal.x) * p_view_1.x) * rz3_) * v_J[2].x)) - ((focal.y * rz2_) * v_J[1].y)) + ((((2f * focal.y) * p_view_1.y) * rz3_) * v_J[2].y)));
    let _e193 = v_mean;
    v_mean = (_e193 + vec3<f32>(dot(v_t, W[0]), dot(v_t, W[1]), dot(v_t, W[2])));
    let v_V_symm = mat3x3<f32>(vec3<f32>(v_cov3d0_, (0.5f * v_cov3d1_), (0.5f * v_cov3d2_)), vec3<f32>((0.5f * v_cov3d1_), v_cov3d3_, (0.5f * v_cov3d4_)), vec3<f32>((0.5f * v_cov3d2_), (0.5f * v_cov3d4_), v_cov3d5_));
    let v_M = ((2f * v_V_symm) * M);
    let v_scale = vec3<f32>(dot(_e84[0], v_M[0]), dot(_e84[1], v_M[1]), dot(_e84[2], v_M[2]));
    let v_R_1 = (v_M * _e85);
    let _e225 = quat_to_rotmat_vjp(quat_2, v_R_1);
    v_quats[idx] = _e225;
    v_scales[idx] = vec4<f32>(v_scale, 0f);
    let _e234 = v_mean;
    v_means[idx] = vec4<f32>(_e234, 0f);
    return;
}
"#;
}
